// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2015 15:08:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bancoderegistradores
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bancoderegistradores_vlg_sample_tst(
	clk,
	controle_registradores,
	endereco_registrador1,
	endereco_registrador2,
	endereco_registrador3,
	registrador_memoria,
	valor,
	sampler_tx
);
input  clk;
input [1:0] controle_registradores;
input [4:0] endereco_registrador1;
input [4:0] endereco_registrador2;
input [4:0] endereco_registrador3;
input [15:0] registrador_memoria;
input [15:0] valor;
output sampler_tx;

reg sample;
time current_time;
always @(clk or controle_registradores or endereco_registrador1 or endereco_registrador2 or endereco_registrador3 or registrador_memoria or valor)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bancoderegistradores_vlg_check_tst (
	valor1,
	valor2,
	sampler_rx
);
input [15:0] valor1;
input [15:0] valor2;
input sampler_rx;

reg [15:0] valor1_expected;
reg [15:0] valor2_expected;

reg [15:0] valor1_prev;
reg [15:0] valor2_prev;

reg [15:0] valor1_expected_prev;
reg [15:0] valor2_expected_prev;

reg [15:0] last_valor1_exp;
reg [15:0] last_valor2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	valor1_prev = valor1;
	valor2_prev = valor2;
end

// update expected /o prevs

always @(trigger)
begin
	valor1_expected_prev = valor1_expected;
	valor2_expected_prev = valor2_expected;
end


// expected valor1[ 15 ]
initial
begin
	valor1_expected[15] = 1'bX;
end 
// expected valor1[ 14 ]
initial
begin
	valor1_expected[14] = 1'bX;
end 
// expected valor1[ 13 ]
initial
begin
	valor1_expected[13] = 1'bX;
end 
// expected valor1[ 12 ]
initial
begin
	valor1_expected[12] = 1'bX;
end 
// expected valor1[ 11 ]
initial
begin
	valor1_expected[11] = 1'bX;
end 
// expected valor1[ 10 ]
initial
begin
	valor1_expected[10] = 1'bX;
end 
// expected valor1[ 9 ]
initial
begin
	valor1_expected[9] = 1'bX;
end 
// expected valor1[ 8 ]
initial
begin
	valor1_expected[8] = 1'bX;
end 
// expected valor1[ 7 ]
initial
begin
	valor1_expected[7] = 1'bX;
end 
// expected valor1[ 6 ]
initial
begin
	valor1_expected[6] = 1'bX;
end 
// expected valor1[ 5 ]
initial
begin
	valor1_expected[5] = 1'bX;
end 
// expected valor1[ 4 ]
initial
begin
	valor1_expected[4] = 1'bX;
end 
// expected valor1[ 3 ]
initial
begin
	valor1_expected[3] = 1'bX;
end 
// expected valor1[ 2 ]
initial
begin
	valor1_expected[2] = 1'bX;
end 
// expected valor1[ 1 ]
initial
begin
	valor1_expected[1] = 1'bX;
end 
// expected valor1[ 0 ]
initial
begin
	valor1_expected[0] = 1'bX;
end 
// expected valor2[ 15 ]
initial
begin
	valor2_expected[15] = 1'bX;
end 
// expected valor2[ 14 ]
initial
begin
	valor2_expected[14] = 1'bX;
end 
// expected valor2[ 13 ]
initial
begin
	valor2_expected[13] = 1'bX;
end 
// expected valor2[ 12 ]
initial
begin
	valor2_expected[12] = 1'bX;
end 
// expected valor2[ 11 ]
initial
begin
	valor2_expected[11] = 1'bX;
end 
// expected valor2[ 10 ]
initial
begin
	valor2_expected[10] = 1'bX;
end 
// expected valor2[ 9 ]
initial
begin
	valor2_expected[9] = 1'bX;
end 
// expected valor2[ 8 ]
initial
begin
	valor2_expected[8] = 1'bX;
end 
// expected valor2[ 7 ]
initial
begin
	valor2_expected[7] = 1'bX;
end 
// expected valor2[ 6 ]
initial
begin
	valor2_expected[6] = 1'bX;
end 
// expected valor2[ 5 ]
initial
begin
	valor2_expected[5] = 1'bX;
end 
// expected valor2[ 4 ]
initial
begin
	valor2_expected[4] = 1'bX;
end 
// expected valor2[ 3 ]
initial
begin
	valor2_expected[3] = 1'bX;
end 
// expected valor2[ 2 ]
initial
begin
	valor2_expected[2] = 1'bX;
end 
// expected valor2[ 1 ]
initial
begin
	valor2_expected[1] = 1'bX;
end 
// expected valor2[ 0 ]
initial
begin
	valor2_expected[0] = 1'bX;
end 
// generate trigger
always @(valor1_expected or valor1 or valor2_expected or valor2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected valor1 = %b | expected valor2 = %b | ",valor1_expected_prev,valor2_expected_prev);
	$display("| real valor1 = %b | real valor2 = %b | ",valor1_prev,valor2_prev);
`endif
	if (
		( valor1_expected_prev[0] !== 1'bx ) && ( valor1_prev[0] !== valor1_expected_prev[0] )
		&& ((valor1_expected_prev[0] !== last_valor1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[0] = valor1_expected_prev[0];
	end
	if (
		( valor1_expected_prev[1] !== 1'bx ) && ( valor1_prev[1] !== valor1_expected_prev[1] )
		&& ((valor1_expected_prev[1] !== last_valor1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[1] = valor1_expected_prev[1];
	end
	if (
		( valor1_expected_prev[2] !== 1'bx ) && ( valor1_prev[2] !== valor1_expected_prev[2] )
		&& ((valor1_expected_prev[2] !== last_valor1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[2] = valor1_expected_prev[2];
	end
	if (
		( valor1_expected_prev[3] !== 1'bx ) && ( valor1_prev[3] !== valor1_expected_prev[3] )
		&& ((valor1_expected_prev[3] !== last_valor1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[3] = valor1_expected_prev[3];
	end
	if (
		( valor1_expected_prev[4] !== 1'bx ) && ( valor1_prev[4] !== valor1_expected_prev[4] )
		&& ((valor1_expected_prev[4] !== last_valor1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[4] = valor1_expected_prev[4];
	end
	if (
		( valor1_expected_prev[5] !== 1'bx ) && ( valor1_prev[5] !== valor1_expected_prev[5] )
		&& ((valor1_expected_prev[5] !== last_valor1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[5] = valor1_expected_prev[5];
	end
	if (
		( valor1_expected_prev[6] !== 1'bx ) && ( valor1_prev[6] !== valor1_expected_prev[6] )
		&& ((valor1_expected_prev[6] !== last_valor1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[6] = valor1_expected_prev[6];
	end
	if (
		( valor1_expected_prev[7] !== 1'bx ) && ( valor1_prev[7] !== valor1_expected_prev[7] )
		&& ((valor1_expected_prev[7] !== last_valor1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[7] = valor1_expected_prev[7];
	end
	if (
		( valor1_expected_prev[8] !== 1'bx ) && ( valor1_prev[8] !== valor1_expected_prev[8] )
		&& ((valor1_expected_prev[8] !== last_valor1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[8] = valor1_expected_prev[8];
	end
	if (
		( valor1_expected_prev[9] !== 1'bx ) && ( valor1_prev[9] !== valor1_expected_prev[9] )
		&& ((valor1_expected_prev[9] !== last_valor1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[9] = valor1_expected_prev[9];
	end
	if (
		( valor1_expected_prev[10] !== 1'bx ) && ( valor1_prev[10] !== valor1_expected_prev[10] )
		&& ((valor1_expected_prev[10] !== last_valor1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[10] = valor1_expected_prev[10];
	end
	if (
		( valor1_expected_prev[11] !== 1'bx ) && ( valor1_prev[11] !== valor1_expected_prev[11] )
		&& ((valor1_expected_prev[11] !== last_valor1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[11] = valor1_expected_prev[11];
	end
	if (
		( valor1_expected_prev[12] !== 1'bx ) && ( valor1_prev[12] !== valor1_expected_prev[12] )
		&& ((valor1_expected_prev[12] !== last_valor1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[12] = valor1_expected_prev[12];
	end
	if (
		( valor1_expected_prev[13] !== 1'bx ) && ( valor1_prev[13] !== valor1_expected_prev[13] )
		&& ((valor1_expected_prev[13] !== last_valor1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[13] = valor1_expected_prev[13];
	end
	if (
		( valor1_expected_prev[14] !== 1'bx ) && ( valor1_prev[14] !== valor1_expected_prev[14] )
		&& ((valor1_expected_prev[14] !== last_valor1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[14] = valor1_expected_prev[14];
	end
	if (
		( valor1_expected_prev[15] !== 1'bx ) && ( valor1_prev[15] !== valor1_expected_prev[15] )
		&& ((valor1_expected_prev[15] !== last_valor1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor1_expected_prev);
		$display ("     Real value = %b", valor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_valor1_exp[15] = valor1_expected_prev[15];
	end
	if (
		( valor2_expected_prev[0] !== 1'bx ) && ( valor2_prev[0] !== valor2_expected_prev[0] )
		&& ((valor2_expected_prev[0] !== last_valor2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[0] = valor2_expected_prev[0];
	end
	if (
		( valor2_expected_prev[1] !== 1'bx ) && ( valor2_prev[1] !== valor2_expected_prev[1] )
		&& ((valor2_expected_prev[1] !== last_valor2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[1] = valor2_expected_prev[1];
	end
	if (
		( valor2_expected_prev[2] !== 1'bx ) && ( valor2_prev[2] !== valor2_expected_prev[2] )
		&& ((valor2_expected_prev[2] !== last_valor2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[2] = valor2_expected_prev[2];
	end
	if (
		( valor2_expected_prev[3] !== 1'bx ) && ( valor2_prev[3] !== valor2_expected_prev[3] )
		&& ((valor2_expected_prev[3] !== last_valor2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[3] = valor2_expected_prev[3];
	end
	if (
		( valor2_expected_prev[4] !== 1'bx ) && ( valor2_prev[4] !== valor2_expected_prev[4] )
		&& ((valor2_expected_prev[4] !== last_valor2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[4] = valor2_expected_prev[4];
	end
	if (
		( valor2_expected_prev[5] !== 1'bx ) && ( valor2_prev[5] !== valor2_expected_prev[5] )
		&& ((valor2_expected_prev[5] !== last_valor2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[5] = valor2_expected_prev[5];
	end
	if (
		( valor2_expected_prev[6] !== 1'bx ) && ( valor2_prev[6] !== valor2_expected_prev[6] )
		&& ((valor2_expected_prev[6] !== last_valor2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[6] = valor2_expected_prev[6];
	end
	if (
		( valor2_expected_prev[7] !== 1'bx ) && ( valor2_prev[7] !== valor2_expected_prev[7] )
		&& ((valor2_expected_prev[7] !== last_valor2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[7] = valor2_expected_prev[7];
	end
	if (
		( valor2_expected_prev[8] !== 1'bx ) && ( valor2_prev[8] !== valor2_expected_prev[8] )
		&& ((valor2_expected_prev[8] !== last_valor2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[8] = valor2_expected_prev[8];
	end
	if (
		( valor2_expected_prev[9] !== 1'bx ) && ( valor2_prev[9] !== valor2_expected_prev[9] )
		&& ((valor2_expected_prev[9] !== last_valor2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[9] = valor2_expected_prev[9];
	end
	if (
		( valor2_expected_prev[10] !== 1'bx ) && ( valor2_prev[10] !== valor2_expected_prev[10] )
		&& ((valor2_expected_prev[10] !== last_valor2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[10] = valor2_expected_prev[10];
	end
	if (
		( valor2_expected_prev[11] !== 1'bx ) && ( valor2_prev[11] !== valor2_expected_prev[11] )
		&& ((valor2_expected_prev[11] !== last_valor2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[11] = valor2_expected_prev[11];
	end
	if (
		( valor2_expected_prev[12] !== 1'bx ) && ( valor2_prev[12] !== valor2_expected_prev[12] )
		&& ((valor2_expected_prev[12] !== last_valor2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[12] = valor2_expected_prev[12];
	end
	if (
		( valor2_expected_prev[13] !== 1'bx ) && ( valor2_prev[13] !== valor2_expected_prev[13] )
		&& ((valor2_expected_prev[13] !== last_valor2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[13] = valor2_expected_prev[13];
	end
	if (
		( valor2_expected_prev[14] !== 1'bx ) && ( valor2_prev[14] !== valor2_expected_prev[14] )
		&& ((valor2_expected_prev[14] !== last_valor2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[14] = valor2_expected_prev[14];
	end
	if (
		( valor2_expected_prev[15] !== 1'bx ) && ( valor2_prev[15] !== valor2_expected_prev[15] )
		&& ((valor2_expected_prev[15] !== last_valor2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor2_expected_prev);
		$display ("     Real value = %b", valor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_valor2_exp[15] = valor2_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bancoderegistradores_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] controle_registradores;
reg [4:0] endereco_registrador1;
reg [4:0] endereco_registrador2;
reg [4:0] endereco_registrador3;
reg [15:0] registrador_memoria;
reg [15:0] valor;
// wires                                               
wire [15:0] valor1;
wire [15:0] valor2;

wire sampler;                             

// assign statements (if any)                          
bancoderegistradores i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.controle_registradores(controle_registradores),
	.endereco_registrador1(endereco_registrador1),
	.endereco_registrador2(endereco_registrador2),
	.endereco_registrador3(endereco_registrador3),
	.registrador_memoria(registrador_memoria),
	.valor(valor),
	.valor1(valor1),
	.valor2(valor2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// controle_registradores[ 1 ]
initial
begin
	repeat(3)
	begin
		controle_registradores[1] = 1'b0;
		controle_registradores[1] = #160000 1'b1;
		# 160000;
	end
	controle_registradores[1] = 1'b0;
end 
// controle_registradores[ 0 ]
initial
begin
	repeat(6)
	begin
		controle_registradores[0] = 1'b0;
		controle_registradores[0] = #80000 1'b1;
		# 80000;
	end
	controle_registradores[0] = 1'b0;
end 
// endereco_registrador1[ 4 ]
initial
begin
	endereco_registrador1[4] = 1'b0;
end 
// endereco_registrador1[ 3 ]
initial
begin
	endereco_registrador1[3] = 1'b0;
end 
// endereco_registrador1[ 2 ]
initial
begin
	endereco_registrador1[2] = 1'b0;
end 
// endereco_registrador1[ 1 ]
initial
begin
	endereco_registrador1[1] = 1'b0;
end 
// endereco_registrador1[ 0 ]
initial
begin
	endereco_registrador1[0] = 1'b0;
end 
// endereco_registrador2[ 4 ]
initial
begin
	endereco_registrador2[4] = 1'b0;
end 
// endereco_registrador2[ 3 ]
initial
begin
	endereco_registrador2[3] = 1'b0;
end 
// endereco_registrador2[ 2 ]
initial
begin
	endereco_registrador2[2] = 1'b0;
end 
// endereco_registrador2[ 1 ]
initial
begin
	endereco_registrador2[1] = 1'b0;
end 
// endereco_registrador2[ 0 ]
initial
begin
	endereco_registrador2[0] = 1'b1;
end 
// endereco_registrador3[ 4 ]
initial
begin
	endereco_registrador3[4] = 1'b1;
end 
// endereco_registrador3[ 3 ]
initial
begin
	endereco_registrador3[3] = 1'b0;
end 
// endereco_registrador3[ 2 ]
initial
begin
	endereco_registrador3[2] = 1'b0;
end 
// endereco_registrador3[ 1 ]
initial
begin
	endereco_registrador3[1] = 1'b0;
end 
// endereco_registrador3[ 0 ]
initial
begin
	endereco_registrador3[0] = 1'b0;
end 
// registrador_memoria[ 15 ]
initial
begin
	registrador_memoria[15] = 1'b0;
end 
// registrador_memoria[ 14 ]
initial
begin
	registrador_memoria[14] = 1'b1;
end 
// registrador_memoria[ 13 ]
initial
begin
	registrador_memoria[13] = 1'b0;
end 
// registrador_memoria[ 12 ]
initial
begin
	registrador_memoria[12] = 1'b0;
end 
// registrador_memoria[ 11 ]
initial
begin
	registrador_memoria[11] = 1'b0;
end 
// registrador_memoria[ 10 ]
initial
begin
	registrador_memoria[10] = 1'b0;
end 
// registrador_memoria[ 9 ]
initial
begin
	registrador_memoria[9] = 1'b0;
end 
// registrador_memoria[ 8 ]
initial
begin
	registrador_memoria[8] = 1'b0;
end 
// registrador_memoria[ 7 ]
initial
begin
	registrador_memoria[7] = 1'b0;
end 
// registrador_memoria[ 6 ]
initial
begin
	registrador_memoria[6] = 1'b0;
end 
// registrador_memoria[ 5 ]
initial
begin
	registrador_memoria[5] = 1'b0;
end 
// registrador_memoria[ 4 ]
initial
begin
	registrador_memoria[4] = 1'b0;
end 
// registrador_memoria[ 3 ]
initial
begin
	registrador_memoria[3] = 1'b0;
end 
// registrador_memoria[ 2 ]
initial
begin
	registrador_memoria[2] = 1'b0;
end 
// registrador_memoria[ 1 ]
initial
begin
	registrador_memoria[1] = 1'b0;
end 
// registrador_memoria[ 0 ]
initial
begin
	registrador_memoria[0] = 1'b0;
end 
// valor[ 15 ]
initial
begin
	valor[15] = 1'b0;
end 
// valor[ 14 ]
initial
begin
	valor[14] = 1'b0;
end 
// valor[ 13 ]
initial
begin
	valor[13] = 1'b0;
end 
// valor[ 12 ]
initial
begin
	valor[12] = 1'b0;
end 
// valor[ 11 ]
initial
begin
	valor[11] = 1'b0;
end 
// valor[ 10 ]
initial
begin
	valor[10] = 1'b0;
end 
// valor[ 9 ]
initial
begin
	valor[9] = 1'b0;
end 
// valor[ 8 ]
initial
begin
	valor[8] = 1'b0;
end 
// valor[ 7 ]
initial
begin
	valor[7] = 1'b0;
end 
// valor[ 6 ]
initial
begin
	valor[6] = 1'b0;
end 
// valor[ 5 ]
initial
begin
	valor[5] = 1'b0;
end 
// valor[ 4 ]
initial
begin
	valor[4] = 1'b0;
end 
// valor[ 3 ]
initial
begin
	valor[3] = 1'b0;
end 
// valor[ 2 ]
initial
begin
	valor[2] = 1'b0;
end 
// valor[ 1 ]
initial
begin
	valor[1] = 1'b0;
end 
// valor[ 0 ]
initial
begin
	valor[0] = 1'b1;
end 

bancoderegistradores_vlg_sample_tst tb_sample (
	.clk(clk),
	.controle_registradores(controle_registradores),
	.endereco_registrador1(endereco_registrador1),
	.endereco_registrador2(endereco_registrador2),
	.endereco_registrador3(endereco_registrador3),
	.registrador_memoria(registrador_memoria),
	.valor(valor),
	.sampler_tx(sampler)
);

bancoderegistradores_vlg_check_tst tb_out(
	.valor1(valor1),
	.valor2(valor2),
	.sampler_rx(sampler)
);
endmodule

