// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2015 23:31:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controladora
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controladora_vlg_sample_tst(
	instrucao_saida,
	sampler_tx
);
input [31:0] instrucao_saida;
output sampler_tx;

reg sample;
time current_time;
always @(instrucao_saida)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controladora_vlg_check_tst (
	controle_memoria,
	controle_moduloio,
	controle_pc,
	controle_registradores,
	controle_ula,
	endereco_branch,
	endereco_memoria,
	endereco_registrador1,
	endereco_registrador2,
	endereco_registrador3,
	jump,
	registrador_memoria,
	valor,
	sampler_rx
);
input [1:0] controle_memoria;
input [1:0] controle_moduloio;
input [1:0] controle_pc;
input [1:0] controle_registradores;
input [4:0] controle_ula;
input [15:0] endereco_branch;
input [15:0] endereco_memoria;
input [4:0] endereco_registrador1;
input [4:0] endereco_registrador2;
input [4:0] endereco_registrador3;
input [15:0] jump;
input [15:0] registrador_memoria;
input [15:0] valor;
input sampler_rx;

reg [1:0] controle_memoria_expected;
reg [1:0] controle_moduloio_expected;
reg [1:0] controle_pc_expected;
reg [1:0] controle_registradores_expected;
reg [4:0] controle_ula_expected;
reg [15:0] endereco_branch_expected;
reg [15:0] endereco_memoria_expected;
reg [4:0] endereco_registrador1_expected;
reg [4:0] endereco_registrador2_expected;
reg [4:0] endereco_registrador3_expected;
reg [15:0] jump_expected;
reg [15:0] registrador_memoria_expected;
reg [15:0] valor_expected;

reg [1:0] controle_memoria_prev;
reg [1:0] controle_moduloio_prev;
reg [1:0] controle_pc_prev;
reg [1:0] controle_registradores_prev;
reg [4:0] controle_ula_prev;
reg [15:0] endereco_branch_prev;
reg [15:0] endereco_memoria_prev;
reg [4:0] endereco_registrador1_prev;
reg [4:0] endereco_registrador2_prev;
reg [4:0] endereco_registrador3_prev;
reg [15:0] jump_prev;
reg [15:0] registrador_memoria_prev;
reg [15:0] valor_prev;

reg [1:0] controle_memoria_expected_prev;
reg [1:0] controle_moduloio_expected_prev;
reg [1:0] controle_pc_expected_prev;
reg [1:0] controle_registradores_expected_prev;
reg [4:0] controle_ula_expected_prev;
reg [15:0] endereco_branch_expected_prev;
reg [15:0] endereco_memoria_expected_prev;
reg [4:0] endereco_registrador1_expected_prev;
reg [4:0] endereco_registrador2_expected_prev;
reg [4:0] endereco_registrador3_expected_prev;
reg [15:0] jump_expected_prev;
reg [15:0] registrador_memoria_expected_prev;
reg [15:0] valor_expected_prev;

reg [1:0] last_controle_memoria_exp;
reg [1:0] last_controle_moduloio_exp;
reg [1:0] last_controle_pc_exp;
reg [1:0] last_controle_registradores_exp;
reg [4:0] last_controle_ula_exp;
reg [15:0] last_endereco_branch_exp;
reg [15:0] last_endereco_memoria_exp;
reg [4:0] last_endereco_registrador1_exp;
reg [4:0] last_endereco_registrador2_exp;
reg [4:0] last_endereco_registrador3_exp;
reg [15:0] last_jump_exp;
reg [15:0] last_registrador_memoria_exp;
reg [15:0] last_valor_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	controle_memoria_prev = controle_memoria;
	controle_moduloio_prev = controle_moduloio;
	controle_pc_prev = controle_pc;
	controle_registradores_prev = controle_registradores;
	controle_ula_prev = controle_ula;
	endereco_branch_prev = endereco_branch;
	endereco_memoria_prev = endereco_memoria;
	endereco_registrador1_prev = endereco_registrador1;
	endereco_registrador2_prev = endereco_registrador2;
	endereco_registrador3_prev = endereco_registrador3;
	jump_prev = jump;
	registrador_memoria_prev = registrador_memoria;
	valor_prev = valor;
end

// update expected /o prevs

always @(trigger)
begin
	controle_memoria_expected_prev = controle_memoria_expected;
	controle_moduloio_expected_prev = controle_moduloio_expected;
	controle_pc_expected_prev = controle_pc_expected;
	controle_registradores_expected_prev = controle_registradores_expected;
	controle_ula_expected_prev = controle_ula_expected;
	endereco_branch_expected_prev = endereco_branch_expected;
	endereco_memoria_expected_prev = endereco_memoria_expected;
	endereco_registrador1_expected_prev = endereco_registrador1_expected;
	endereco_registrador2_expected_prev = endereco_registrador2_expected;
	endereco_registrador3_expected_prev = endereco_registrador3_expected;
	jump_expected_prev = jump_expected;
	registrador_memoria_expected_prev = registrador_memoria_expected;
	valor_expected_prev = valor_expected;
end


// expected controle_memoria[ 1 ]
initial
begin
	controle_memoria_expected[1] = 1'bX;
end 
// expected controle_memoria[ 0 ]
initial
begin
	controle_memoria_expected[0] = 1'bX;
end 
// expected controle_moduloio[ 1 ]
initial
begin
	controle_moduloio_expected[1] = 1'bX;
end 
// expected controle_moduloio[ 0 ]
initial
begin
	controle_moduloio_expected[0] = 1'bX;
end 
// expected controle_pc[ 1 ]
initial
begin
	controle_pc_expected[1] = 1'bX;
end 
// expected controle_pc[ 0 ]
initial
begin
	controle_pc_expected[0] = 1'bX;
end 
// expected controle_registradores[ 1 ]
initial
begin
	controle_registradores_expected[1] = 1'bX;
end 
// expected controle_registradores[ 0 ]
initial
begin
	controle_registradores_expected[0] = 1'bX;
end 
// expected controle_ula[ 4 ]
initial
begin
	controle_ula_expected[4] = 1'bX;
end 
// expected controle_ula[ 3 ]
initial
begin
	controle_ula_expected[3] = 1'bX;
end 
// expected controle_ula[ 2 ]
initial
begin
	controle_ula_expected[2] = 1'bX;
end 
// expected controle_ula[ 1 ]
initial
begin
	controle_ula_expected[1] = 1'bX;
end 
// expected controle_ula[ 0 ]
initial
begin
	controle_ula_expected[0] = 1'bX;
end 
// expected endereco_branch[ 15 ]
initial
begin
	endereco_branch_expected[15] = 1'bX;
end 
// expected endereco_branch[ 14 ]
initial
begin
	endereco_branch_expected[14] = 1'bX;
end 
// expected endereco_branch[ 13 ]
initial
begin
	endereco_branch_expected[13] = 1'bX;
end 
// expected endereco_branch[ 12 ]
initial
begin
	endereco_branch_expected[12] = 1'bX;
end 
// expected endereco_branch[ 11 ]
initial
begin
	endereco_branch_expected[11] = 1'bX;
end 
// expected endereco_branch[ 10 ]
initial
begin
	endereco_branch_expected[10] = 1'bX;
end 
// expected endereco_branch[ 9 ]
initial
begin
	endereco_branch_expected[9] = 1'bX;
end 
// expected endereco_branch[ 8 ]
initial
begin
	endereco_branch_expected[8] = 1'bX;
end 
// expected endereco_branch[ 7 ]
initial
begin
	endereco_branch_expected[7] = 1'bX;
end 
// expected endereco_branch[ 6 ]
initial
begin
	endereco_branch_expected[6] = 1'bX;
end 
// expected endereco_branch[ 5 ]
initial
begin
	endereco_branch_expected[5] = 1'bX;
end 
// expected endereco_branch[ 4 ]
initial
begin
	endereco_branch_expected[4] = 1'bX;
end 
// expected endereco_branch[ 3 ]
initial
begin
	endereco_branch_expected[3] = 1'bX;
end 
// expected endereco_branch[ 2 ]
initial
begin
	endereco_branch_expected[2] = 1'bX;
end 
// expected endereco_branch[ 1 ]
initial
begin
	endereco_branch_expected[1] = 1'bX;
end 
// expected endereco_branch[ 0 ]
initial
begin
	endereco_branch_expected[0] = 1'bX;
end 
// expected endereco_memoria[ 15 ]
initial
begin
	endereco_memoria_expected[15] = 1'bX;
end 
// expected endereco_memoria[ 14 ]
initial
begin
	endereco_memoria_expected[14] = 1'bX;
end 
// expected endereco_memoria[ 13 ]
initial
begin
	endereco_memoria_expected[13] = 1'bX;
end 
// expected endereco_memoria[ 12 ]
initial
begin
	endereco_memoria_expected[12] = 1'bX;
end 
// expected endereco_memoria[ 11 ]
initial
begin
	endereco_memoria_expected[11] = 1'bX;
end 
// expected endereco_memoria[ 10 ]
initial
begin
	endereco_memoria_expected[10] = 1'bX;
end 
// expected endereco_memoria[ 9 ]
initial
begin
	endereco_memoria_expected[9] = 1'bX;
end 
// expected endereco_memoria[ 8 ]
initial
begin
	endereco_memoria_expected[8] = 1'bX;
end 
// expected endereco_memoria[ 7 ]
initial
begin
	endereco_memoria_expected[7] = 1'bX;
end 
// expected endereco_memoria[ 6 ]
initial
begin
	endereco_memoria_expected[6] = 1'bX;
end 
// expected endereco_memoria[ 5 ]
initial
begin
	endereco_memoria_expected[5] = 1'bX;
end 
// expected endereco_memoria[ 4 ]
initial
begin
	endereco_memoria_expected[4] = 1'bX;
end 
// expected endereco_memoria[ 3 ]
initial
begin
	endereco_memoria_expected[3] = 1'bX;
end 
// expected endereco_memoria[ 2 ]
initial
begin
	endereco_memoria_expected[2] = 1'bX;
end 
// expected endereco_memoria[ 1 ]
initial
begin
	endereco_memoria_expected[1] = 1'bX;
end 
// expected endereco_memoria[ 0 ]
initial
begin
	endereco_memoria_expected[0] = 1'bX;
end 
// expected endereco_registrador1[ 4 ]
initial
begin
	endereco_registrador1_expected[4] = 1'bX;
end 
// expected endereco_registrador1[ 3 ]
initial
begin
	endereco_registrador1_expected[3] = 1'bX;
end 
// expected endereco_registrador1[ 2 ]
initial
begin
	endereco_registrador1_expected[2] = 1'bX;
end 
// expected endereco_registrador1[ 1 ]
initial
begin
	endereco_registrador1_expected[1] = 1'bX;
end 
// expected endereco_registrador1[ 0 ]
initial
begin
	endereco_registrador1_expected[0] = 1'bX;
end 
// expected endereco_registrador2[ 4 ]
initial
begin
	endereco_registrador2_expected[4] = 1'bX;
end 
// expected endereco_registrador2[ 3 ]
initial
begin
	endereco_registrador2_expected[3] = 1'bX;
end 
// expected endereco_registrador2[ 2 ]
initial
begin
	endereco_registrador2_expected[2] = 1'bX;
end 
// expected endereco_registrador2[ 1 ]
initial
begin
	endereco_registrador2_expected[1] = 1'bX;
end 
// expected endereco_registrador2[ 0 ]
initial
begin
	endereco_registrador2_expected[0] = 1'bX;
end 
// expected endereco_registrador3[ 4 ]
initial
begin
	endereco_registrador3_expected[4] = 1'bX;
end 
// expected endereco_registrador3[ 3 ]
initial
begin
	endereco_registrador3_expected[3] = 1'bX;
end 
// expected endereco_registrador3[ 2 ]
initial
begin
	endereco_registrador3_expected[2] = 1'bX;
end 
// expected endereco_registrador3[ 1 ]
initial
begin
	endereco_registrador3_expected[1] = 1'bX;
end 
// expected endereco_registrador3[ 0 ]
initial
begin
	endereco_registrador3_expected[0] = 1'bX;
end 
// expected jump[ 15 ]
initial
begin
	jump_expected[15] = 1'bX;
end 
// expected jump[ 14 ]
initial
begin
	jump_expected[14] = 1'bX;
end 
// expected jump[ 13 ]
initial
begin
	jump_expected[13] = 1'bX;
end 
// expected jump[ 12 ]
initial
begin
	jump_expected[12] = 1'bX;
end 
// expected jump[ 11 ]
initial
begin
	jump_expected[11] = 1'bX;
end 
// expected jump[ 10 ]
initial
begin
	jump_expected[10] = 1'bX;
end 
// expected jump[ 9 ]
initial
begin
	jump_expected[9] = 1'bX;
end 
// expected jump[ 8 ]
initial
begin
	jump_expected[8] = 1'bX;
end 
// expected jump[ 7 ]
initial
begin
	jump_expected[7] = 1'bX;
end 
// expected jump[ 6 ]
initial
begin
	jump_expected[6] = 1'bX;
end 
// expected jump[ 5 ]
initial
begin
	jump_expected[5] = 1'bX;
end 
// expected jump[ 4 ]
initial
begin
	jump_expected[4] = 1'bX;
end 
// expected jump[ 3 ]
initial
begin
	jump_expected[3] = 1'bX;
end 
// expected jump[ 2 ]
initial
begin
	jump_expected[2] = 1'bX;
end 
// expected jump[ 1 ]
initial
begin
	jump_expected[1] = 1'bX;
end 
// expected jump[ 0 ]
initial
begin
	jump_expected[0] = 1'bX;
end 
// expected registrador_memoria[ 15 ]
initial
begin
	registrador_memoria_expected[15] = 1'bX;
end 
// expected registrador_memoria[ 14 ]
initial
begin
	registrador_memoria_expected[14] = 1'bX;
end 
// expected registrador_memoria[ 13 ]
initial
begin
	registrador_memoria_expected[13] = 1'bX;
end 
// expected registrador_memoria[ 12 ]
initial
begin
	registrador_memoria_expected[12] = 1'bX;
end 
// expected registrador_memoria[ 11 ]
initial
begin
	registrador_memoria_expected[11] = 1'bX;
end 
// expected registrador_memoria[ 10 ]
initial
begin
	registrador_memoria_expected[10] = 1'bX;
end 
// expected registrador_memoria[ 9 ]
initial
begin
	registrador_memoria_expected[9] = 1'bX;
end 
// expected registrador_memoria[ 8 ]
initial
begin
	registrador_memoria_expected[8] = 1'bX;
end 
// expected registrador_memoria[ 7 ]
initial
begin
	registrador_memoria_expected[7] = 1'bX;
end 
// expected registrador_memoria[ 6 ]
initial
begin
	registrador_memoria_expected[6] = 1'bX;
end 
// expected registrador_memoria[ 5 ]
initial
begin
	registrador_memoria_expected[5] = 1'bX;
end 
// expected registrador_memoria[ 4 ]
initial
begin
	registrador_memoria_expected[4] = 1'bX;
end 
// expected registrador_memoria[ 3 ]
initial
begin
	registrador_memoria_expected[3] = 1'bX;
end 
// expected registrador_memoria[ 2 ]
initial
begin
	registrador_memoria_expected[2] = 1'bX;
end 
// expected registrador_memoria[ 1 ]
initial
begin
	registrador_memoria_expected[1] = 1'bX;
end 
// expected registrador_memoria[ 0 ]
initial
begin
	registrador_memoria_expected[0] = 1'bX;
end 
// expected valor[ 15 ]
initial
begin
	valor_expected[15] = 1'bX;
end 
// expected valor[ 14 ]
initial
begin
	valor_expected[14] = 1'bX;
end 
// expected valor[ 13 ]
initial
begin
	valor_expected[13] = 1'bX;
end 
// expected valor[ 12 ]
initial
begin
	valor_expected[12] = 1'bX;
end 
// expected valor[ 11 ]
initial
begin
	valor_expected[11] = 1'bX;
end 
// expected valor[ 10 ]
initial
begin
	valor_expected[10] = 1'bX;
end 
// expected valor[ 9 ]
initial
begin
	valor_expected[9] = 1'bX;
end 
// expected valor[ 8 ]
initial
begin
	valor_expected[8] = 1'bX;
end 
// expected valor[ 7 ]
initial
begin
	valor_expected[7] = 1'bX;
end 
// expected valor[ 6 ]
initial
begin
	valor_expected[6] = 1'bX;
end 
// expected valor[ 5 ]
initial
begin
	valor_expected[5] = 1'bX;
end 
// expected valor[ 4 ]
initial
begin
	valor_expected[4] = 1'bX;
end 
// expected valor[ 3 ]
initial
begin
	valor_expected[3] = 1'bX;
end 
// expected valor[ 2 ]
initial
begin
	valor_expected[2] = 1'bX;
end 
// expected valor[ 1 ]
initial
begin
	valor_expected[1] = 1'bX;
end 
// expected valor[ 0 ]
initial
begin
	valor_expected[0] = 1'bX;
end 
// generate trigger
always @(controle_memoria_expected or controle_memoria or controle_moduloio_expected or controle_moduloio or controle_pc_expected or controle_pc or controle_registradores_expected or controle_registradores or controle_ula_expected or controle_ula or endereco_branch_expected or endereco_branch or endereco_memoria_expected or endereco_memoria or endereco_registrador1_expected or endereco_registrador1 or endereco_registrador2_expected or endereco_registrador2 or endereco_registrador3_expected or endereco_registrador3 or jump_expected or jump or registrador_memoria_expected or registrador_memoria or valor_expected or valor)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected controle_memoria = %b | expected controle_moduloio = %b | expected controle_pc = %b | expected controle_registradores = %b | expected controle_ula = %b | expected endereco_branch = %b | expected endereco_memoria = %b | expected endereco_registrador1 = %b | expected endereco_registrador2 = %b | expected endereco_registrador3 = %b | expected jump = %b | expected registrador_memoria = %b | expected valor = %b | ",controle_memoria_expected_prev,controle_moduloio_expected_prev,controle_pc_expected_prev,controle_registradores_expected_prev,controle_ula_expected_prev,endereco_branch_expected_prev,endereco_memoria_expected_prev,endereco_registrador1_expected_prev,endereco_registrador2_expected_prev,endereco_registrador3_expected_prev,jump_expected_prev,registrador_memoria_expected_prev,valor_expected_prev);
	$display("| real controle_memoria = %b | real controle_moduloio = %b | real controle_pc = %b | real controle_registradores = %b | real controle_ula = %b | real endereco_branch = %b | real endereco_memoria = %b | real endereco_registrador1 = %b | real endereco_registrador2 = %b | real endereco_registrador3 = %b | real jump = %b | real registrador_memoria = %b | real valor = %b | ",controle_memoria_prev,controle_moduloio_prev,controle_pc_prev,controle_registradores_prev,controle_ula_prev,endereco_branch_prev,endereco_memoria_prev,endereco_registrador1_prev,endereco_registrador2_prev,endereco_registrador3_prev,jump_prev,registrador_memoria_prev,valor_prev);
`endif
	if (
		( controle_memoria_expected_prev[0] !== 1'bx ) && ( controle_memoria_prev[0] !== controle_memoria_expected_prev[0] )
		&& ((controle_memoria_expected_prev[0] !== last_controle_memoria_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_memoria[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_memoria_expected_prev);
		$display ("     Real value = %b", controle_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_controle_memoria_exp[0] = controle_memoria_expected_prev[0];
	end
	if (
		( controle_memoria_expected_prev[1] !== 1'bx ) && ( controle_memoria_prev[1] !== controle_memoria_expected_prev[1] )
		&& ((controle_memoria_expected_prev[1] !== last_controle_memoria_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_memoria[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_memoria_expected_prev);
		$display ("     Real value = %b", controle_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_controle_memoria_exp[1] = controle_memoria_expected_prev[1];
	end
	if (
		( controle_moduloio_expected_prev[0] !== 1'bx ) && ( controle_moduloio_prev[0] !== controle_moduloio_expected_prev[0] )
		&& ((controle_moduloio_expected_prev[0] !== last_controle_moduloio_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_moduloio[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_moduloio_expected_prev);
		$display ("     Real value = %b", controle_moduloio_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controle_moduloio_exp[0] = controle_moduloio_expected_prev[0];
	end
	if (
		( controle_moduloio_expected_prev[1] !== 1'bx ) && ( controle_moduloio_prev[1] !== controle_moduloio_expected_prev[1] )
		&& ((controle_moduloio_expected_prev[1] !== last_controle_moduloio_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_moduloio[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_moduloio_expected_prev);
		$display ("     Real value = %b", controle_moduloio_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_controle_moduloio_exp[1] = controle_moduloio_expected_prev[1];
	end
	if (
		( controle_pc_expected_prev[0] !== 1'bx ) && ( controle_pc_prev[0] !== controle_pc_expected_prev[0] )
		&& ((controle_pc_expected_prev[0] !== last_controle_pc_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_pc_expected_prev);
		$display ("     Real value = %b", controle_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_controle_pc_exp[0] = controle_pc_expected_prev[0];
	end
	if (
		( controle_pc_expected_prev[1] !== 1'bx ) && ( controle_pc_prev[1] !== controle_pc_expected_prev[1] )
		&& ((controle_pc_expected_prev[1] !== last_controle_pc_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_pc_expected_prev);
		$display ("     Real value = %b", controle_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_controle_pc_exp[1] = controle_pc_expected_prev[1];
	end
	if (
		( controle_registradores_expected_prev[0] !== 1'bx ) && ( controle_registradores_prev[0] !== controle_registradores_expected_prev[0] )
		&& ((controle_registradores_expected_prev[0] !== last_controle_registradores_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_registradores[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_registradores_expected_prev);
		$display ("     Real value = %b", controle_registradores_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_controle_registradores_exp[0] = controle_registradores_expected_prev[0];
	end
	if (
		( controle_registradores_expected_prev[1] !== 1'bx ) && ( controle_registradores_prev[1] !== controle_registradores_expected_prev[1] )
		&& ((controle_registradores_expected_prev[1] !== last_controle_registradores_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_registradores[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_registradores_expected_prev);
		$display ("     Real value = %b", controle_registradores_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_controle_registradores_exp[1] = controle_registradores_expected_prev[1];
	end
	if (
		( controle_ula_expected_prev[0] !== 1'bx ) && ( controle_ula_prev[0] !== controle_ula_expected_prev[0] )
		&& ((controle_ula_expected_prev[0] !== last_controle_ula_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_ula[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_ula_expected_prev);
		$display ("     Real value = %b", controle_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_controle_ula_exp[0] = controle_ula_expected_prev[0];
	end
	if (
		( controle_ula_expected_prev[1] !== 1'bx ) && ( controle_ula_prev[1] !== controle_ula_expected_prev[1] )
		&& ((controle_ula_expected_prev[1] !== last_controle_ula_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_ula[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_ula_expected_prev);
		$display ("     Real value = %b", controle_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_controle_ula_exp[1] = controle_ula_expected_prev[1];
	end
	if (
		( controle_ula_expected_prev[2] !== 1'bx ) && ( controle_ula_prev[2] !== controle_ula_expected_prev[2] )
		&& ((controle_ula_expected_prev[2] !== last_controle_ula_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_ula[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_ula_expected_prev);
		$display ("     Real value = %b", controle_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_controle_ula_exp[2] = controle_ula_expected_prev[2];
	end
	if (
		( controle_ula_expected_prev[3] !== 1'bx ) && ( controle_ula_prev[3] !== controle_ula_expected_prev[3] )
		&& ((controle_ula_expected_prev[3] !== last_controle_ula_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_ula[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_ula_expected_prev);
		$display ("     Real value = %b", controle_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_controle_ula_exp[3] = controle_ula_expected_prev[3];
	end
	if (
		( controle_ula_expected_prev[4] !== 1'bx ) && ( controle_ula_prev[4] !== controle_ula_expected_prev[4] )
		&& ((controle_ula_expected_prev[4] !== last_controle_ula_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controle_ula[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controle_ula_expected_prev);
		$display ("     Real value = %b", controle_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_controle_ula_exp[4] = controle_ula_expected_prev[4];
	end
	if (
		( endereco_branch_expected_prev[0] !== 1'bx ) && ( endereco_branch_prev[0] !== endereco_branch_expected_prev[0] )
		&& ((endereco_branch_expected_prev[0] !== last_endereco_branch_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[0] = endereco_branch_expected_prev[0];
	end
	if (
		( endereco_branch_expected_prev[1] !== 1'bx ) && ( endereco_branch_prev[1] !== endereco_branch_expected_prev[1] )
		&& ((endereco_branch_expected_prev[1] !== last_endereco_branch_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[1] = endereco_branch_expected_prev[1];
	end
	if (
		( endereco_branch_expected_prev[2] !== 1'bx ) && ( endereco_branch_prev[2] !== endereco_branch_expected_prev[2] )
		&& ((endereco_branch_expected_prev[2] !== last_endereco_branch_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[2] = endereco_branch_expected_prev[2];
	end
	if (
		( endereco_branch_expected_prev[3] !== 1'bx ) && ( endereco_branch_prev[3] !== endereco_branch_expected_prev[3] )
		&& ((endereco_branch_expected_prev[3] !== last_endereco_branch_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[3] = endereco_branch_expected_prev[3];
	end
	if (
		( endereco_branch_expected_prev[4] !== 1'bx ) && ( endereco_branch_prev[4] !== endereco_branch_expected_prev[4] )
		&& ((endereco_branch_expected_prev[4] !== last_endereco_branch_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[4] = endereco_branch_expected_prev[4];
	end
	if (
		( endereco_branch_expected_prev[5] !== 1'bx ) && ( endereco_branch_prev[5] !== endereco_branch_expected_prev[5] )
		&& ((endereco_branch_expected_prev[5] !== last_endereco_branch_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[5] = endereco_branch_expected_prev[5];
	end
	if (
		( endereco_branch_expected_prev[6] !== 1'bx ) && ( endereco_branch_prev[6] !== endereco_branch_expected_prev[6] )
		&& ((endereco_branch_expected_prev[6] !== last_endereco_branch_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[6] = endereco_branch_expected_prev[6];
	end
	if (
		( endereco_branch_expected_prev[7] !== 1'bx ) && ( endereco_branch_prev[7] !== endereco_branch_expected_prev[7] )
		&& ((endereco_branch_expected_prev[7] !== last_endereco_branch_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[7] = endereco_branch_expected_prev[7];
	end
	if (
		( endereco_branch_expected_prev[8] !== 1'bx ) && ( endereco_branch_prev[8] !== endereco_branch_expected_prev[8] )
		&& ((endereco_branch_expected_prev[8] !== last_endereco_branch_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[8] = endereco_branch_expected_prev[8];
	end
	if (
		( endereco_branch_expected_prev[9] !== 1'bx ) && ( endereco_branch_prev[9] !== endereco_branch_expected_prev[9] )
		&& ((endereco_branch_expected_prev[9] !== last_endereco_branch_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[9] = endereco_branch_expected_prev[9];
	end
	if (
		( endereco_branch_expected_prev[10] !== 1'bx ) && ( endereco_branch_prev[10] !== endereco_branch_expected_prev[10] )
		&& ((endereco_branch_expected_prev[10] !== last_endereco_branch_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[10] = endereco_branch_expected_prev[10];
	end
	if (
		( endereco_branch_expected_prev[11] !== 1'bx ) && ( endereco_branch_prev[11] !== endereco_branch_expected_prev[11] )
		&& ((endereco_branch_expected_prev[11] !== last_endereco_branch_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[11] = endereco_branch_expected_prev[11];
	end
	if (
		( endereco_branch_expected_prev[12] !== 1'bx ) && ( endereco_branch_prev[12] !== endereco_branch_expected_prev[12] )
		&& ((endereco_branch_expected_prev[12] !== last_endereco_branch_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[12] = endereco_branch_expected_prev[12];
	end
	if (
		( endereco_branch_expected_prev[13] !== 1'bx ) && ( endereco_branch_prev[13] !== endereco_branch_expected_prev[13] )
		&& ((endereco_branch_expected_prev[13] !== last_endereco_branch_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[13] = endereco_branch_expected_prev[13];
	end
	if (
		( endereco_branch_expected_prev[14] !== 1'bx ) && ( endereco_branch_prev[14] !== endereco_branch_expected_prev[14] )
		&& ((endereco_branch_expected_prev[14] !== last_endereco_branch_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[14] = endereco_branch_expected_prev[14];
	end
	if (
		( endereco_branch_expected_prev[15] !== 1'bx ) && ( endereco_branch_prev[15] !== endereco_branch_expected_prev[15] )
		&& ((endereco_branch_expected_prev[15] !== last_endereco_branch_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_branch[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_branch_expected_prev);
		$display ("     Real value = %b", endereco_branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_endereco_branch_exp[15] = endereco_branch_expected_prev[15];
	end
	if (
		( endereco_memoria_expected_prev[0] !== 1'bx ) && ( endereco_memoria_prev[0] !== endereco_memoria_expected_prev[0] )
		&& ((endereco_memoria_expected_prev[0] !== last_endereco_memoria_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[0] = endereco_memoria_expected_prev[0];
	end
	if (
		( endereco_memoria_expected_prev[1] !== 1'bx ) && ( endereco_memoria_prev[1] !== endereco_memoria_expected_prev[1] )
		&& ((endereco_memoria_expected_prev[1] !== last_endereco_memoria_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[1] = endereco_memoria_expected_prev[1];
	end
	if (
		( endereco_memoria_expected_prev[2] !== 1'bx ) && ( endereco_memoria_prev[2] !== endereco_memoria_expected_prev[2] )
		&& ((endereco_memoria_expected_prev[2] !== last_endereco_memoria_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[2] = endereco_memoria_expected_prev[2];
	end
	if (
		( endereco_memoria_expected_prev[3] !== 1'bx ) && ( endereco_memoria_prev[3] !== endereco_memoria_expected_prev[3] )
		&& ((endereco_memoria_expected_prev[3] !== last_endereco_memoria_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[3] = endereco_memoria_expected_prev[3];
	end
	if (
		( endereco_memoria_expected_prev[4] !== 1'bx ) && ( endereco_memoria_prev[4] !== endereco_memoria_expected_prev[4] )
		&& ((endereco_memoria_expected_prev[4] !== last_endereco_memoria_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[4] = endereco_memoria_expected_prev[4];
	end
	if (
		( endereco_memoria_expected_prev[5] !== 1'bx ) && ( endereco_memoria_prev[5] !== endereco_memoria_expected_prev[5] )
		&& ((endereco_memoria_expected_prev[5] !== last_endereco_memoria_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[5] = endereco_memoria_expected_prev[5];
	end
	if (
		( endereco_memoria_expected_prev[6] !== 1'bx ) && ( endereco_memoria_prev[6] !== endereco_memoria_expected_prev[6] )
		&& ((endereco_memoria_expected_prev[6] !== last_endereco_memoria_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[6] = endereco_memoria_expected_prev[6];
	end
	if (
		( endereco_memoria_expected_prev[7] !== 1'bx ) && ( endereco_memoria_prev[7] !== endereco_memoria_expected_prev[7] )
		&& ((endereco_memoria_expected_prev[7] !== last_endereco_memoria_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[7] = endereco_memoria_expected_prev[7];
	end
	if (
		( endereco_memoria_expected_prev[8] !== 1'bx ) && ( endereco_memoria_prev[8] !== endereco_memoria_expected_prev[8] )
		&& ((endereco_memoria_expected_prev[8] !== last_endereco_memoria_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[8] = endereco_memoria_expected_prev[8];
	end
	if (
		( endereco_memoria_expected_prev[9] !== 1'bx ) && ( endereco_memoria_prev[9] !== endereco_memoria_expected_prev[9] )
		&& ((endereco_memoria_expected_prev[9] !== last_endereco_memoria_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[9] = endereco_memoria_expected_prev[9];
	end
	if (
		( endereco_memoria_expected_prev[10] !== 1'bx ) && ( endereco_memoria_prev[10] !== endereco_memoria_expected_prev[10] )
		&& ((endereco_memoria_expected_prev[10] !== last_endereco_memoria_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[10] = endereco_memoria_expected_prev[10];
	end
	if (
		( endereco_memoria_expected_prev[11] !== 1'bx ) && ( endereco_memoria_prev[11] !== endereco_memoria_expected_prev[11] )
		&& ((endereco_memoria_expected_prev[11] !== last_endereco_memoria_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[11] = endereco_memoria_expected_prev[11];
	end
	if (
		( endereco_memoria_expected_prev[12] !== 1'bx ) && ( endereco_memoria_prev[12] !== endereco_memoria_expected_prev[12] )
		&& ((endereco_memoria_expected_prev[12] !== last_endereco_memoria_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[12] = endereco_memoria_expected_prev[12];
	end
	if (
		( endereco_memoria_expected_prev[13] !== 1'bx ) && ( endereco_memoria_prev[13] !== endereco_memoria_expected_prev[13] )
		&& ((endereco_memoria_expected_prev[13] !== last_endereco_memoria_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[13] = endereco_memoria_expected_prev[13];
	end
	if (
		( endereco_memoria_expected_prev[14] !== 1'bx ) && ( endereco_memoria_prev[14] !== endereco_memoria_expected_prev[14] )
		&& ((endereco_memoria_expected_prev[14] !== last_endereco_memoria_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[14] = endereco_memoria_expected_prev[14];
	end
	if (
		( endereco_memoria_expected_prev[15] !== 1'bx ) && ( endereco_memoria_prev[15] !== endereco_memoria_expected_prev[15] )
		&& ((endereco_memoria_expected_prev[15] !== last_endereco_memoria_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_memoria[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_memoria_expected_prev);
		$display ("     Real value = %b", endereco_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_endereco_memoria_exp[15] = endereco_memoria_expected_prev[15];
	end
	if (
		( endereco_registrador1_expected_prev[0] !== 1'bx ) && ( endereco_registrador1_prev[0] !== endereco_registrador1_expected_prev[0] )
		&& ((endereco_registrador1_expected_prev[0] !== last_endereco_registrador1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador1_expected_prev);
		$display ("     Real value = %b", endereco_registrador1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_endereco_registrador1_exp[0] = endereco_registrador1_expected_prev[0];
	end
	if (
		( endereco_registrador1_expected_prev[1] !== 1'bx ) && ( endereco_registrador1_prev[1] !== endereco_registrador1_expected_prev[1] )
		&& ((endereco_registrador1_expected_prev[1] !== last_endereco_registrador1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador1_expected_prev);
		$display ("     Real value = %b", endereco_registrador1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_endereco_registrador1_exp[1] = endereco_registrador1_expected_prev[1];
	end
	if (
		( endereco_registrador1_expected_prev[2] !== 1'bx ) && ( endereco_registrador1_prev[2] !== endereco_registrador1_expected_prev[2] )
		&& ((endereco_registrador1_expected_prev[2] !== last_endereco_registrador1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador1_expected_prev);
		$display ("     Real value = %b", endereco_registrador1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_endereco_registrador1_exp[2] = endereco_registrador1_expected_prev[2];
	end
	if (
		( endereco_registrador1_expected_prev[3] !== 1'bx ) && ( endereco_registrador1_prev[3] !== endereco_registrador1_expected_prev[3] )
		&& ((endereco_registrador1_expected_prev[3] !== last_endereco_registrador1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador1_expected_prev);
		$display ("     Real value = %b", endereco_registrador1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_endereco_registrador1_exp[3] = endereco_registrador1_expected_prev[3];
	end
	if (
		( endereco_registrador1_expected_prev[4] !== 1'bx ) && ( endereco_registrador1_prev[4] !== endereco_registrador1_expected_prev[4] )
		&& ((endereco_registrador1_expected_prev[4] !== last_endereco_registrador1_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador1_expected_prev);
		$display ("     Real value = %b", endereco_registrador1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_endereco_registrador1_exp[4] = endereco_registrador1_expected_prev[4];
	end
	if (
		( endereco_registrador2_expected_prev[0] !== 1'bx ) && ( endereco_registrador2_prev[0] !== endereco_registrador2_expected_prev[0] )
		&& ((endereco_registrador2_expected_prev[0] !== last_endereco_registrador2_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador2_expected_prev);
		$display ("     Real value = %b", endereco_registrador2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_registrador2_exp[0] = endereco_registrador2_expected_prev[0];
	end
	if (
		( endereco_registrador2_expected_prev[1] !== 1'bx ) && ( endereco_registrador2_prev[1] !== endereco_registrador2_expected_prev[1] )
		&& ((endereco_registrador2_expected_prev[1] !== last_endereco_registrador2_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador2_expected_prev);
		$display ("     Real value = %b", endereco_registrador2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_registrador2_exp[1] = endereco_registrador2_expected_prev[1];
	end
	if (
		( endereco_registrador2_expected_prev[2] !== 1'bx ) && ( endereco_registrador2_prev[2] !== endereco_registrador2_expected_prev[2] )
		&& ((endereco_registrador2_expected_prev[2] !== last_endereco_registrador2_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador2_expected_prev);
		$display ("     Real value = %b", endereco_registrador2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_registrador2_exp[2] = endereco_registrador2_expected_prev[2];
	end
	if (
		( endereco_registrador2_expected_prev[3] !== 1'bx ) && ( endereco_registrador2_prev[3] !== endereco_registrador2_expected_prev[3] )
		&& ((endereco_registrador2_expected_prev[3] !== last_endereco_registrador2_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador2_expected_prev);
		$display ("     Real value = %b", endereco_registrador2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_registrador2_exp[3] = endereco_registrador2_expected_prev[3];
	end
	if (
		( endereco_registrador2_expected_prev[4] !== 1'bx ) && ( endereco_registrador2_prev[4] !== endereco_registrador2_expected_prev[4] )
		&& ((endereco_registrador2_expected_prev[4] !== last_endereco_registrador2_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador2_expected_prev);
		$display ("     Real value = %b", endereco_registrador2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_endereco_registrador2_exp[4] = endereco_registrador2_expected_prev[4];
	end
	if (
		( endereco_registrador3_expected_prev[0] !== 1'bx ) && ( endereco_registrador3_prev[0] !== endereco_registrador3_expected_prev[0] )
		&& ((endereco_registrador3_expected_prev[0] !== last_endereco_registrador3_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador3_expected_prev);
		$display ("     Real value = %b", endereco_registrador3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_registrador3_exp[0] = endereco_registrador3_expected_prev[0];
	end
	if (
		( endereco_registrador3_expected_prev[1] !== 1'bx ) && ( endereco_registrador3_prev[1] !== endereco_registrador3_expected_prev[1] )
		&& ((endereco_registrador3_expected_prev[1] !== last_endereco_registrador3_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador3_expected_prev);
		$display ("     Real value = %b", endereco_registrador3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_registrador3_exp[1] = endereco_registrador3_expected_prev[1];
	end
	if (
		( endereco_registrador3_expected_prev[2] !== 1'bx ) && ( endereco_registrador3_prev[2] !== endereco_registrador3_expected_prev[2] )
		&& ((endereco_registrador3_expected_prev[2] !== last_endereco_registrador3_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador3_expected_prev);
		$display ("     Real value = %b", endereco_registrador3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_registrador3_exp[2] = endereco_registrador3_expected_prev[2];
	end
	if (
		( endereco_registrador3_expected_prev[3] !== 1'bx ) && ( endereco_registrador3_prev[3] !== endereco_registrador3_expected_prev[3] )
		&& ((endereco_registrador3_expected_prev[3] !== last_endereco_registrador3_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador3_expected_prev);
		$display ("     Real value = %b", endereco_registrador3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_registrador3_exp[3] = endereco_registrador3_expected_prev[3];
	end
	if (
		( endereco_registrador3_expected_prev[4] !== 1'bx ) && ( endereco_registrador3_prev[4] !== endereco_registrador3_expected_prev[4] )
		&& ((endereco_registrador3_expected_prev[4] !== last_endereco_registrador3_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco_registrador3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_registrador3_expected_prev);
		$display ("     Real value = %b", endereco_registrador3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_registrador3_exp[4] = endereco_registrador3_expected_prev[4];
	end
	if (
		( jump_expected_prev[0] !== 1'bx ) && ( jump_prev[0] !== jump_expected_prev[0] )
		&& ((jump_expected_prev[0] !== last_jump_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[0] = jump_expected_prev[0];
	end
	if (
		( jump_expected_prev[1] !== 1'bx ) && ( jump_prev[1] !== jump_expected_prev[1] )
		&& ((jump_expected_prev[1] !== last_jump_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[1] = jump_expected_prev[1];
	end
	if (
		( jump_expected_prev[2] !== 1'bx ) && ( jump_prev[2] !== jump_expected_prev[2] )
		&& ((jump_expected_prev[2] !== last_jump_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[2] = jump_expected_prev[2];
	end
	if (
		( jump_expected_prev[3] !== 1'bx ) && ( jump_prev[3] !== jump_expected_prev[3] )
		&& ((jump_expected_prev[3] !== last_jump_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[3] = jump_expected_prev[3];
	end
	if (
		( jump_expected_prev[4] !== 1'bx ) && ( jump_prev[4] !== jump_expected_prev[4] )
		&& ((jump_expected_prev[4] !== last_jump_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[4] = jump_expected_prev[4];
	end
	if (
		( jump_expected_prev[5] !== 1'bx ) && ( jump_prev[5] !== jump_expected_prev[5] )
		&& ((jump_expected_prev[5] !== last_jump_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[5] = jump_expected_prev[5];
	end
	if (
		( jump_expected_prev[6] !== 1'bx ) && ( jump_prev[6] !== jump_expected_prev[6] )
		&& ((jump_expected_prev[6] !== last_jump_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[6] = jump_expected_prev[6];
	end
	if (
		( jump_expected_prev[7] !== 1'bx ) && ( jump_prev[7] !== jump_expected_prev[7] )
		&& ((jump_expected_prev[7] !== last_jump_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[7] = jump_expected_prev[7];
	end
	if (
		( jump_expected_prev[8] !== 1'bx ) && ( jump_prev[8] !== jump_expected_prev[8] )
		&& ((jump_expected_prev[8] !== last_jump_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[8] = jump_expected_prev[8];
	end
	if (
		( jump_expected_prev[9] !== 1'bx ) && ( jump_prev[9] !== jump_expected_prev[9] )
		&& ((jump_expected_prev[9] !== last_jump_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[9] = jump_expected_prev[9];
	end
	if (
		( jump_expected_prev[10] !== 1'bx ) && ( jump_prev[10] !== jump_expected_prev[10] )
		&& ((jump_expected_prev[10] !== last_jump_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[10] = jump_expected_prev[10];
	end
	if (
		( jump_expected_prev[11] !== 1'bx ) && ( jump_prev[11] !== jump_expected_prev[11] )
		&& ((jump_expected_prev[11] !== last_jump_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[11] = jump_expected_prev[11];
	end
	if (
		( jump_expected_prev[12] !== 1'bx ) && ( jump_prev[12] !== jump_expected_prev[12] )
		&& ((jump_expected_prev[12] !== last_jump_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[12] = jump_expected_prev[12];
	end
	if (
		( jump_expected_prev[13] !== 1'bx ) && ( jump_prev[13] !== jump_expected_prev[13] )
		&& ((jump_expected_prev[13] !== last_jump_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[13] = jump_expected_prev[13];
	end
	if (
		( jump_expected_prev[14] !== 1'bx ) && ( jump_prev[14] !== jump_expected_prev[14] )
		&& ((jump_expected_prev[14] !== last_jump_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[14] = jump_expected_prev[14];
	end
	if (
		( jump_expected_prev[15] !== 1'bx ) && ( jump_prev[15] !== jump_expected_prev[15] )
		&& ((jump_expected_prev[15] !== last_jump_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_jump_exp[15] = jump_expected_prev[15];
	end
	if (
		( registrador_memoria_expected_prev[0] !== 1'bx ) && ( registrador_memoria_prev[0] !== registrador_memoria_expected_prev[0] )
		&& ((registrador_memoria_expected_prev[0] !== last_registrador_memoria_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[0] = registrador_memoria_expected_prev[0];
	end
	if (
		( registrador_memoria_expected_prev[1] !== 1'bx ) && ( registrador_memoria_prev[1] !== registrador_memoria_expected_prev[1] )
		&& ((registrador_memoria_expected_prev[1] !== last_registrador_memoria_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[1] = registrador_memoria_expected_prev[1];
	end
	if (
		( registrador_memoria_expected_prev[2] !== 1'bx ) && ( registrador_memoria_prev[2] !== registrador_memoria_expected_prev[2] )
		&& ((registrador_memoria_expected_prev[2] !== last_registrador_memoria_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[2] = registrador_memoria_expected_prev[2];
	end
	if (
		( registrador_memoria_expected_prev[3] !== 1'bx ) && ( registrador_memoria_prev[3] !== registrador_memoria_expected_prev[3] )
		&& ((registrador_memoria_expected_prev[3] !== last_registrador_memoria_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[3] = registrador_memoria_expected_prev[3];
	end
	if (
		( registrador_memoria_expected_prev[4] !== 1'bx ) && ( registrador_memoria_prev[4] !== registrador_memoria_expected_prev[4] )
		&& ((registrador_memoria_expected_prev[4] !== last_registrador_memoria_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[4] = registrador_memoria_expected_prev[4];
	end
	if (
		( registrador_memoria_expected_prev[5] !== 1'bx ) && ( registrador_memoria_prev[5] !== registrador_memoria_expected_prev[5] )
		&& ((registrador_memoria_expected_prev[5] !== last_registrador_memoria_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[5] = registrador_memoria_expected_prev[5];
	end
	if (
		( registrador_memoria_expected_prev[6] !== 1'bx ) && ( registrador_memoria_prev[6] !== registrador_memoria_expected_prev[6] )
		&& ((registrador_memoria_expected_prev[6] !== last_registrador_memoria_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[6] = registrador_memoria_expected_prev[6];
	end
	if (
		( registrador_memoria_expected_prev[7] !== 1'bx ) && ( registrador_memoria_prev[7] !== registrador_memoria_expected_prev[7] )
		&& ((registrador_memoria_expected_prev[7] !== last_registrador_memoria_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[7] = registrador_memoria_expected_prev[7];
	end
	if (
		( registrador_memoria_expected_prev[8] !== 1'bx ) && ( registrador_memoria_prev[8] !== registrador_memoria_expected_prev[8] )
		&& ((registrador_memoria_expected_prev[8] !== last_registrador_memoria_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[8] = registrador_memoria_expected_prev[8];
	end
	if (
		( registrador_memoria_expected_prev[9] !== 1'bx ) && ( registrador_memoria_prev[9] !== registrador_memoria_expected_prev[9] )
		&& ((registrador_memoria_expected_prev[9] !== last_registrador_memoria_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[9] = registrador_memoria_expected_prev[9];
	end
	if (
		( registrador_memoria_expected_prev[10] !== 1'bx ) && ( registrador_memoria_prev[10] !== registrador_memoria_expected_prev[10] )
		&& ((registrador_memoria_expected_prev[10] !== last_registrador_memoria_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[10] = registrador_memoria_expected_prev[10];
	end
	if (
		( registrador_memoria_expected_prev[11] !== 1'bx ) && ( registrador_memoria_prev[11] !== registrador_memoria_expected_prev[11] )
		&& ((registrador_memoria_expected_prev[11] !== last_registrador_memoria_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[11] = registrador_memoria_expected_prev[11];
	end
	if (
		( registrador_memoria_expected_prev[12] !== 1'bx ) && ( registrador_memoria_prev[12] !== registrador_memoria_expected_prev[12] )
		&& ((registrador_memoria_expected_prev[12] !== last_registrador_memoria_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[12] = registrador_memoria_expected_prev[12];
	end
	if (
		( registrador_memoria_expected_prev[13] !== 1'bx ) && ( registrador_memoria_prev[13] !== registrador_memoria_expected_prev[13] )
		&& ((registrador_memoria_expected_prev[13] !== last_registrador_memoria_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[13] = registrador_memoria_expected_prev[13];
	end
	if (
		( registrador_memoria_expected_prev[14] !== 1'bx ) && ( registrador_memoria_prev[14] !== registrador_memoria_expected_prev[14] )
		&& ((registrador_memoria_expected_prev[14] !== last_registrador_memoria_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[14] = registrador_memoria_expected_prev[14];
	end
	if (
		( registrador_memoria_expected_prev[15] !== 1'bx ) && ( registrador_memoria_prev[15] !== registrador_memoria_expected_prev[15] )
		&& ((registrador_memoria_expected_prev[15] !== last_registrador_memoria_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registrador_memoria[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registrador_memoria_expected_prev);
		$display ("     Real value = %b", registrador_memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_registrador_memoria_exp[15] = registrador_memoria_expected_prev[15];
	end
	if (
		( valor_expected_prev[0] !== 1'bx ) && ( valor_prev[0] !== valor_expected_prev[0] )
		&& ((valor_expected_prev[0] !== last_valor_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[0] = valor_expected_prev[0];
	end
	if (
		( valor_expected_prev[1] !== 1'bx ) && ( valor_prev[1] !== valor_expected_prev[1] )
		&& ((valor_expected_prev[1] !== last_valor_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[1] = valor_expected_prev[1];
	end
	if (
		( valor_expected_prev[2] !== 1'bx ) && ( valor_prev[2] !== valor_expected_prev[2] )
		&& ((valor_expected_prev[2] !== last_valor_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[2] = valor_expected_prev[2];
	end
	if (
		( valor_expected_prev[3] !== 1'bx ) && ( valor_prev[3] !== valor_expected_prev[3] )
		&& ((valor_expected_prev[3] !== last_valor_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[3] = valor_expected_prev[3];
	end
	if (
		( valor_expected_prev[4] !== 1'bx ) && ( valor_prev[4] !== valor_expected_prev[4] )
		&& ((valor_expected_prev[4] !== last_valor_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[4] = valor_expected_prev[4];
	end
	if (
		( valor_expected_prev[5] !== 1'bx ) && ( valor_prev[5] !== valor_expected_prev[5] )
		&& ((valor_expected_prev[5] !== last_valor_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[5] = valor_expected_prev[5];
	end
	if (
		( valor_expected_prev[6] !== 1'bx ) && ( valor_prev[6] !== valor_expected_prev[6] )
		&& ((valor_expected_prev[6] !== last_valor_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[6] = valor_expected_prev[6];
	end
	if (
		( valor_expected_prev[7] !== 1'bx ) && ( valor_prev[7] !== valor_expected_prev[7] )
		&& ((valor_expected_prev[7] !== last_valor_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[7] = valor_expected_prev[7];
	end
	if (
		( valor_expected_prev[8] !== 1'bx ) && ( valor_prev[8] !== valor_expected_prev[8] )
		&& ((valor_expected_prev[8] !== last_valor_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[8] = valor_expected_prev[8];
	end
	if (
		( valor_expected_prev[9] !== 1'bx ) && ( valor_prev[9] !== valor_expected_prev[9] )
		&& ((valor_expected_prev[9] !== last_valor_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[9] = valor_expected_prev[9];
	end
	if (
		( valor_expected_prev[10] !== 1'bx ) && ( valor_prev[10] !== valor_expected_prev[10] )
		&& ((valor_expected_prev[10] !== last_valor_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[10] = valor_expected_prev[10];
	end
	if (
		( valor_expected_prev[11] !== 1'bx ) && ( valor_prev[11] !== valor_expected_prev[11] )
		&& ((valor_expected_prev[11] !== last_valor_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[11] = valor_expected_prev[11];
	end
	if (
		( valor_expected_prev[12] !== 1'bx ) && ( valor_prev[12] !== valor_expected_prev[12] )
		&& ((valor_expected_prev[12] !== last_valor_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[12] = valor_expected_prev[12];
	end
	if (
		( valor_expected_prev[13] !== 1'bx ) && ( valor_prev[13] !== valor_expected_prev[13] )
		&& ((valor_expected_prev[13] !== last_valor_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[13] = valor_expected_prev[13];
	end
	if (
		( valor_expected_prev[14] !== 1'bx ) && ( valor_prev[14] !== valor_expected_prev[14] )
		&& ((valor_expected_prev[14] !== last_valor_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[14] = valor_expected_prev[14];
	end
	if (
		( valor_expected_prev[15] !== 1'bx ) && ( valor_prev[15] !== valor_expected_prev[15] )
		&& ((valor_expected_prev[15] !== last_valor_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_expected_prev);
		$display ("     Real value = %b", valor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_valor_exp[15] = valor_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controladora_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] instrucao_saida;
// wires                                               
wire [1:0] controle_memoria;
wire [1:0] controle_moduloio;
wire [1:0] controle_pc;
wire [1:0] controle_registradores;
wire [4:0] controle_ula;
wire [15:0] endereco_branch;
wire [15:0] endereco_memoria;
wire [4:0] endereco_registrador1;
wire [4:0] endereco_registrador2;
wire [4:0] endereco_registrador3;
wire [15:0] jump;
wire [15:0] registrador_memoria;
wire [15:0] valor;

wire sampler;                             

// assign statements (if any)                          
controladora i1 (
// port map - connection between master ports and signals/registers   
	.controle_memoria(controle_memoria),
	.controle_moduloio(controle_moduloio),
	.controle_pc(controle_pc),
	.controle_registradores(controle_registradores),
	.controle_ula(controle_ula),
	.endereco_branch(endereco_branch),
	.endereco_memoria(endereco_memoria),
	.endereco_registrador1(endereco_registrador1),
	.endereco_registrador2(endereco_registrador2),
	.endereco_registrador3(endereco_registrador3),
	.instrucao_saida(instrucao_saida),
	.jump(jump),
	.registrador_memoria(registrador_memoria),
	.valor(valor)
);
// instrucao_saida[ 31 ]
initial
begin
	instrucao_saida[31] = 1'b0;
	instrucao_saida[31] = #640000 1'b1;
end 
// instrucao_saida[ 30 ]
initial
begin
	instrucao_saida[30] = 1'b0;
	instrucao_saida[30] = #320000 1'b1;
	instrucao_saida[30] = #320000 1'b0;
	instrucao_saida[30] = #320000 1'b1;
end 
// instrucao_saida[ 29 ]
initial
begin
	repeat(3)
	begin
		instrucao_saida[29] = 1'b0;
		instrucao_saida[29] = #160000 1'b1;
		# 160000;
	end
	instrucao_saida[29] = 1'b0;
end 
// instrucao_saida[ 28 ]
initial
begin
	repeat(6)
	begin
		instrucao_saida[28] = 1'b0;
		instrucao_saida[28] = #80000 1'b1;
		# 80000;
	end
	instrucao_saida[28] = 1'b0;
end 
// instrucao_saida[ 27 ]
initial
begin
	repeat(12)
	begin
		instrucao_saida[27] = 1'b0;
		instrucao_saida[27] = #40000 1'b1;
		# 40000;
	end
	instrucao_saida[27] = 1'b0;
end 
// instrucao_saida[ 26 ]
initial
begin
	instrucao_saida[26] = 1'b0;
end 
// instrucao_saida[ 25 ]
initial
begin
	instrucao_saida[25] = 1'b0;
end 
// instrucao_saida[ 24 ]
initial
begin
	instrucao_saida[24] = 1'b0;
end 
// instrucao_saida[ 23 ]
initial
begin
	instrucao_saida[23] = 1'b0;
end 
// instrucao_saida[ 22 ]
initial
begin
	instrucao_saida[22] = 1'b0;
end 
// instrucao_saida[ 21 ]
initial
begin
	instrucao_saida[21] = 1'b0;
end 
// instrucao_saida[ 20 ]
initial
begin
	instrucao_saida[20] = 1'b0;
end 
// instrucao_saida[ 19 ]
initial
begin
	instrucao_saida[19] = 1'b0;
end 
// instrucao_saida[ 18 ]
initial
begin
	instrucao_saida[18] = 1'b0;
end 
// instrucao_saida[ 17 ]
initial
begin
	instrucao_saida[17] = 1'b0;
end 
// instrucao_saida[ 16 ]
initial
begin
	instrucao_saida[16] = 1'b0;
end 
// instrucao_saida[ 15 ]
initial
begin
	instrucao_saida[15] = 1'b0;
end 
// instrucao_saida[ 14 ]
initial
begin
	instrucao_saida[14] = 1'b0;
end 
// instrucao_saida[ 13 ]
initial
begin
	instrucao_saida[13] = 1'b0;
end 
// instrucao_saida[ 12 ]
initial
begin
	instrucao_saida[12] = 1'b0;
end 
// instrucao_saida[ 11 ]
initial
begin
	instrucao_saida[11] = 1'b0;
end 
// instrucao_saida[ 10 ]
initial
begin
	instrucao_saida[10] = 1'b0;
end 
// instrucao_saida[ 9 ]
initial
begin
	instrucao_saida[9] = 1'b0;
end 
// instrucao_saida[ 8 ]
initial
begin
	instrucao_saida[8] = 1'b0;
end 
// instrucao_saida[ 7 ]
initial
begin
	instrucao_saida[7] = 1'b0;
end 
// instrucao_saida[ 6 ]
initial
begin
	instrucao_saida[6] = 1'b0;
end 
// instrucao_saida[ 5 ]
initial
begin
	instrucao_saida[5] = 1'b0;
end 
// instrucao_saida[ 4 ]
initial
begin
	instrucao_saida[4] = 1'b0;
end 
// instrucao_saida[ 3 ]
initial
begin
	instrucao_saida[3] = 1'b0;
end 
// instrucao_saida[ 2 ]
initial
begin
	instrucao_saida[2] = 1'b0;
end 
// instrucao_saida[ 1 ]
initial
begin
	instrucao_saida[1] = 1'b0;
end 
// instrucao_saida[ 0 ]
initial
begin
	instrucao_saida[0] = 1'b0;
end 

controladora_vlg_sample_tst tb_sample (
	.instrucao_saida(instrucao_saida),
	.sampler_tx(sampler)
);

controladora_vlg_check_tst tb_out(
	.controle_memoria(controle_memoria),
	.controle_moduloio(controle_moduloio),
	.controle_pc(controle_pc),
	.controle_registradores(controle_registradores),
	.controle_ula(controle_ula),
	.endereco_branch(endereco_branch),
	.endereco_memoria(endereco_memoria),
	.endereco_registrador1(endereco_registrador1),
	.endereco_registrador2(endereco_registrador2),
	.endereco_registrador3(endereco_registrador3),
	.jump(jump),
	.registrador_memoria(registrador_memoria),
	.valor(valor),
	.sampler_rx(sampler)
);
endmodule

