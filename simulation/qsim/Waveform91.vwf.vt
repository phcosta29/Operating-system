// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/04/2015 18:13:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processamento
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processamento_vlg_sample_tst(
	button_in,
	clk,
	entrada,
	sampler_tx
);
input  button_in;
input  clk;
input [15:0] entrada;
output sampler_tx;

reg sample;
time current_time;
always @(button_in or clk or entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processamento_vlg_check_tst (
	codigo,
	display1,
	display2,
	display3,
	display4,
	display5,
	testevalor1,
	testevalor2,
	sampler_rx
);
input [4:0] codigo;
input [6:0] display1;
input [6:0] display2;
input [6:0] display3;
input [6:0] display4;
input [6:0] display5;
input [15:0] testevalor1;
input [15:0] testevalor2;
input sampler_rx;

reg [4:0] codigo_expected;
reg [6:0] display1_expected;
reg [6:0] display2_expected;
reg [6:0] display3_expected;
reg [6:0] display4_expected;
reg [6:0] display5_expected;
reg [15:0] testevalor1_expected;
reg [15:0] testevalor2_expected;

reg [4:0] codigo_prev;
reg [6:0] display1_prev;
reg [6:0] display2_prev;
reg [6:0] display3_prev;
reg [6:0] display4_prev;
reg [6:0] display5_prev;
reg [15:0] testevalor1_prev;
reg [15:0] testevalor2_prev;

reg [4:0] codigo_expected_prev;
reg [6:0] display1_expected_prev;
reg [6:0] display2_expected_prev;
reg [6:0] display3_expected_prev;
reg [6:0] display4_expected_prev;
reg [6:0] display5_expected_prev;
reg [15:0] testevalor1_expected_prev;
reg [15:0] testevalor2_expected_prev;

reg [4:0] last_codigo_exp;
reg [6:0] last_display1_exp;
reg [6:0] last_display2_exp;
reg [6:0] last_display3_exp;
reg [6:0] last_display4_exp;
reg [6:0] last_display5_exp;
reg [15:0] last_testevalor1_exp;
reg [15:0] last_testevalor2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	codigo_prev = codigo;
	display1_prev = display1;
	display2_prev = display2;
	display3_prev = display3;
	display4_prev = display4;
	display5_prev = display5;
	testevalor1_prev = testevalor1;
	testevalor2_prev = testevalor2;
end

// update expected /o prevs

always @(trigger)
begin
	codigo_expected_prev = codigo_expected;
	display1_expected_prev = display1_expected;
	display2_expected_prev = display2_expected;
	display3_expected_prev = display3_expected;
	display4_expected_prev = display4_expected;
	display5_expected_prev = display5_expected;
	testevalor1_expected_prev = testevalor1_expected;
	testevalor2_expected_prev = testevalor2_expected;
end


// expected codigo[ 4 ]
initial
begin
	codigo_expected[4] = 1'bX;
end 
// expected codigo[ 3 ]
initial
begin
	codigo_expected[3] = 1'bX;
end 
// expected codigo[ 2 ]
initial
begin
	codigo_expected[2] = 1'bX;
end 
// expected codigo[ 1 ]
initial
begin
	codigo_expected[1] = 1'bX;
end 
// expected codigo[ 0 ]
initial
begin
	codigo_expected[0] = 1'bX;
end 
// expected display1[ 6 ]
initial
begin
	display1_expected[6] = 1'bX;
end 
// expected display1[ 5 ]
initial
begin
	display1_expected[5] = 1'bX;
end 
// expected display1[ 4 ]
initial
begin
	display1_expected[4] = 1'bX;
end 
// expected display1[ 3 ]
initial
begin
	display1_expected[3] = 1'bX;
end 
// expected display1[ 2 ]
initial
begin
	display1_expected[2] = 1'bX;
end 
// expected display1[ 1 ]
initial
begin
	display1_expected[1] = 1'bX;
end 
// expected display1[ 0 ]
initial
begin
	display1_expected[0] = 1'bX;
end 
// expected display2[ 6 ]
initial
begin
	display2_expected[6] = 1'bX;
end 
// expected display2[ 5 ]
initial
begin
	display2_expected[5] = 1'bX;
end 
// expected display2[ 4 ]
initial
begin
	display2_expected[4] = 1'bX;
end 
// expected display2[ 3 ]
initial
begin
	display2_expected[3] = 1'bX;
end 
// expected display2[ 2 ]
initial
begin
	display2_expected[2] = 1'bX;
end 
// expected display2[ 1 ]
initial
begin
	display2_expected[1] = 1'bX;
end 
// expected display2[ 0 ]
initial
begin
	display2_expected[0] = 1'bX;
end 
// expected display3[ 6 ]
initial
begin
	display3_expected[6] = 1'bX;
end 
// expected display3[ 5 ]
initial
begin
	display3_expected[5] = 1'bX;
end 
// expected display3[ 4 ]
initial
begin
	display3_expected[4] = 1'bX;
end 
// expected display3[ 3 ]
initial
begin
	display3_expected[3] = 1'bX;
end 
// expected display3[ 2 ]
initial
begin
	display3_expected[2] = 1'bX;
end 
// expected display3[ 1 ]
initial
begin
	display3_expected[1] = 1'bX;
end 
// expected display3[ 0 ]
initial
begin
	display3_expected[0] = 1'bX;
end 
// expected display4[ 6 ]
initial
begin
	display4_expected[6] = 1'bX;
end 
// expected display4[ 5 ]
initial
begin
	display4_expected[5] = 1'bX;
end 
// expected display4[ 4 ]
initial
begin
	display4_expected[4] = 1'bX;
end 
// expected display4[ 3 ]
initial
begin
	display4_expected[3] = 1'bX;
end 
// expected display4[ 2 ]
initial
begin
	display4_expected[2] = 1'bX;
end 
// expected display4[ 1 ]
initial
begin
	display4_expected[1] = 1'bX;
end 
// expected display4[ 0 ]
initial
begin
	display4_expected[0] = 1'bX;
end 
// expected display5[ 6 ]
initial
begin
	display5_expected[6] = 1'bX;
end 
// expected display5[ 5 ]
initial
begin
	display5_expected[5] = 1'bX;
end 
// expected display5[ 4 ]
initial
begin
	display5_expected[4] = 1'bX;
end 
// expected display5[ 3 ]
initial
begin
	display5_expected[3] = 1'bX;
end 
// expected display5[ 2 ]
initial
begin
	display5_expected[2] = 1'bX;
end 
// expected display5[ 1 ]
initial
begin
	display5_expected[1] = 1'bX;
end 
// expected display5[ 0 ]
initial
begin
	display5_expected[0] = 1'bX;
end 
// expected testevalor1[ 15 ]
initial
begin
	testevalor1_expected[15] = 1'bX;
end 
// expected testevalor1[ 14 ]
initial
begin
	testevalor1_expected[14] = 1'bX;
end 
// expected testevalor1[ 13 ]
initial
begin
	testevalor1_expected[13] = 1'bX;
end 
// expected testevalor1[ 12 ]
initial
begin
	testevalor1_expected[12] = 1'bX;
end 
// expected testevalor1[ 11 ]
initial
begin
	testevalor1_expected[11] = 1'bX;
end 
// expected testevalor1[ 10 ]
initial
begin
	testevalor1_expected[10] = 1'bX;
end 
// expected testevalor1[ 9 ]
initial
begin
	testevalor1_expected[9] = 1'bX;
end 
// expected testevalor1[ 8 ]
initial
begin
	testevalor1_expected[8] = 1'bX;
end 
// expected testevalor1[ 7 ]
initial
begin
	testevalor1_expected[7] = 1'bX;
end 
// expected testevalor1[ 6 ]
initial
begin
	testevalor1_expected[6] = 1'bX;
end 
// expected testevalor1[ 5 ]
initial
begin
	testevalor1_expected[5] = 1'bX;
end 
// expected testevalor1[ 4 ]
initial
begin
	testevalor1_expected[4] = 1'bX;
end 
// expected testevalor1[ 3 ]
initial
begin
	testevalor1_expected[3] = 1'bX;
end 
// expected testevalor1[ 2 ]
initial
begin
	testevalor1_expected[2] = 1'bX;
end 
// expected testevalor1[ 1 ]
initial
begin
	testevalor1_expected[1] = 1'bX;
end 
// expected testevalor1[ 0 ]
initial
begin
	testevalor1_expected[0] = 1'bX;
end 
// expected testevalor2[ 15 ]
initial
begin
	testevalor2_expected[15] = 1'bX;
end 
// expected testevalor2[ 14 ]
initial
begin
	testevalor2_expected[14] = 1'bX;
end 
// expected testevalor2[ 13 ]
initial
begin
	testevalor2_expected[13] = 1'bX;
end 
// expected testevalor2[ 12 ]
initial
begin
	testevalor2_expected[12] = 1'bX;
end 
// expected testevalor2[ 11 ]
initial
begin
	testevalor2_expected[11] = 1'bX;
end 
// expected testevalor2[ 10 ]
initial
begin
	testevalor2_expected[10] = 1'bX;
end 
// expected testevalor2[ 9 ]
initial
begin
	testevalor2_expected[9] = 1'bX;
end 
// expected testevalor2[ 8 ]
initial
begin
	testevalor2_expected[8] = 1'bX;
end 
// expected testevalor2[ 7 ]
initial
begin
	testevalor2_expected[7] = 1'bX;
end 
// expected testevalor2[ 6 ]
initial
begin
	testevalor2_expected[6] = 1'bX;
end 
// expected testevalor2[ 5 ]
initial
begin
	testevalor2_expected[5] = 1'bX;
end 
// expected testevalor2[ 4 ]
initial
begin
	testevalor2_expected[4] = 1'bX;
end 
// expected testevalor2[ 3 ]
initial
begin
	testevalor2_expected[3] = 1'bX;
end 
// expected testevalor2[ 2 ]
initial
begin
	testevalor2_expected[2] = 1'bX;
end 
// expected testevalor2[ 1 ]
initial
begin
	testevalor2_expected[1] = 1'bX;
end 
// expected testevalor2[ 0 ]
initial
begin
	testevalor2_expected[0] = 1'bX;
end 
// generate trigger
always @(codigo_expected or codigo or display1_expected or display1 or display2_expected or display2 or display3_expected or display3 or display4_expected or display4 or display5_expected or display5 or testevalor1_expected or testevalor1 or testevalor2_expected or testevalor2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected codigo = %b | expected display1 = %b | expected display2 = %b | expected display3 = %b | expected display4 = %b | expected display5 = %b | expected testevalor1 = %b | expected testevalor2 = %b | ",codigo_expected_prev,display1_expected_prev,display2_expected_prev,display3_expected_prev,display4_expected_prev,display5_expected_prev,testevalor1_expected_prev,testevalor2_expected_prev);
	$display("| real codigo = %b | real display1 = %b | real display2 = %b | real display3 = %b | real display4 = %b | real display5 = %b | real testevalor1 = %b | real testevalor2 = %b | ",codigo_prev,display1_prev,display2_prev,display3_prev,display4_prev,display5_prev,testevalor1_prev,testevalor2_prev);
`endif
	if (
		( codigo_expected_prev[0] !== 1'bx ) && ( codigo_prev[0] !== codigo_expected_prev[0] )
		&& ((codigo_expected_prev[0] !== last_codigo_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codigo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codigo_expected_prev);
		$display ("     Real value = %b", codigo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_codigo_exp[0] = codigo_expected_prev[0];
	end
	if (
		( codigo_expected_prev[1] !== 1'bx ) && ( codigo_prev[1] !== codigo_expected_prev[1] )
		&& ((codigo_expected_prev[1] !== last_codigo_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codigo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codigo_expected_prev);
		$display ("     Real value = %b", codigo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_codigo_exp[1] = codigo_expected_prev[1];
	end
	if (
		( codigo_expected_prev[2] !== 1'bx ) && ( codigo_prev[2] !== codigo_expected_prev[2] )
		&& ((codigo_expected_prev[2] !== last_codigo_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codigo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codigo_expected_prev);
		$display ("     Real value = %b", codigo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_codigo_exp[2] = codigo_expected_prev[2];
	end
	if (
		( codigo_expected_prev[3] !== 1'bx ) && ( codigo_prev[3] !== codigo_expected_prev[3] )
		&& ((codigo_expected_prev[3] !== last_codigo_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codigo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codigo_expected_prev);
		$display ("     Real value = %b", codigo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_codigo_exp[3] = codigo_expected_prev[3];
	end
	if (
		( codigo_expected_prev[4] !== 1'bx ) && ( codigo_prev[4] !== codigo_expected_prev[4] )
		&& ((codigo_expected_prev[4] !== last_codigo_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codigo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codigo_expected_prev);
		$display ("     Real value = %b", codigo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_codigo_exp[4] = codigo_expected_prev[4];
	end
	if (
		( display1_expected_prev[0] !== 1'bx ) && ( display1_prev[0] !== display1_expected_prev[0] )
		&& ((display1_expected_prev[0] !== last_display1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[0] = display1_expected_prev[0];
	end
	if (
		( display1_expected_prev[1] !== 1'bx ) && ( display1_prev[1] !== display1_expected_prev[1] )
		&& ((display1_expected_prev[1] !== last_display1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[1] = display1_expected_prev[1];
	end
	if (
		( display1_expected_prev[2] !== 1'bx ) && ( display1_prev[2] !== display1_expected_prev[2] )
		&& ((display1_expected_prev[2] !== last_display1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[2] = display1_expected_prev[2];
	end
	if (
		( display1_expected_prev[3] !== 1'bx ) && ( display1_prev[3] !== display1_expected_prev[3] )
		&& ((display1_expected_prev[3] !== last_display1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[3] = display1_expected_prev[3];
	end
	if (
		( display1_expected_prev[4] !== 1'bx ) && ( display1_prev[4] !== display1_expected_prev[4] )
		&& ((display1_expected_prev[4] !== last_display1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[4] = display1_expected_prev[4];
	end
	if (
		( display1_expected_prev[5] !== 1'bx ) && ( display1_prev[5] !== display1_expected_prev[5] )
		&& ((display1_expected_prev[5] !== last_display1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[5] = display1_expected_prev[5];
	end
	if (
		( display1_expected_prev[6] !== 1'bx ) && ( display1_prev[6] !== display1_expected_prev[6] )
		&& ((display1_expected_prev[6] !== last_display1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[6] = display1_expected_prev[6];
	end
	if (
		( display2_expected_prev[0] !== 1'bx ) && ( display2_prev[0] !== display2_expected_prev[0] )
		&& ((display2_expected_prev[0] !== last_display2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[0] = display2_expected_prev[0];
	end
	if (
		( display2_expected_prev[1] !== 1'bx ) && ( display2_prev[1] !== display2_expected_prev[1] )
		&& ((display2_expected_prev[1] !== last_display2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[1] = display2_expected_prev[1];
	end
	if (
		( display2_expected_prev[2] !== 1'bx ) && ( display2_prev[2] !== display2_expected_prev[2] )
		&& ((display2_expected_prev[2] !== last_display2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[2] = display2_expected_prev[2];
	end
	if (
		( display2_expected_prev[3] !== 1'bx ) && ( display2_prev[3] !== display2_expected_prev[3] )
		&& ((display2_expected_prev[3] !== last_display2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[3] = display2_expected_prev[3];
	end
	if (
		( display2_expected_prev[4] !== 1'bx ) && ( display2_prev[4] !== display2_expected_prev[4] )
		&& ((display2_expected_prev[4] !== last_display2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[4] = display2_expected_prev[4];
	end
	if (
		( display2_expected_prev[5] !== 1'bx ) && ( display2_prev[5] !== display2_expected_prev[5] )
		&& ((display2_expected_prev[5] !== last_display2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[5] = display2_expected_prev[5];
	end
	if (
		( display2_expected_prev[6] !== 1'bx ) && ( display2_prev[6] !== display2_expected_prev[6] )
		&& ((display2_expected_prev[6] !== last_display2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[6] = display2_expected_prev[6];
	end
	if (
		( display3_expected_prev[0] !== 1'bx ) && ( display3_prev[0] !== display3_expected_prev[0] )
		&& ((display3_expected_prev[0] !== last_display3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[0] = display3_expected_prev[0];
	end
	if (
		( display3_expected_prev[1] !== 1'bx ) && ( display3_prev[1] !== display3_expected_prev[1] )
		&& ((display3_expected_prev[1] !== last_display3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[1] = display3_expected_prev[1];
	end
	if (
		( display3_expected_prev[2] !== 1'bx ) && ( display3_prev[2] !== display3_expected_prev[2] )
		&& ((display3_expected_prev[2] !== last_display3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[2] = display3_expected_prev[2];
	end
	if (
		( display3_expected_prev[3] !== 1'bx ) && ( display3_prev[3] !== display3_expected_prev[3] )
		&& ((display3_expected_prev[3] !== last_display3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[3] = display3_expected_prev[3];
	end
	if (
		( display3_expected_prev[4] !== 1'bx ) && ( display3_prev[4] !== display3_expected_prev[4] )
		&& ((display3_expected_prev[4] !== last_display3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[4] = display3_expected_prev[4];
	end
	if (
		( display3_expected_prev[5] !== 1'bx ) && ( display3_prev[5] !== display3_expected_prev[5] )
		&& ((display3_expected_prev[5] !== last_display3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[5] = display3_expected_prev[5];
	end
	if (
		( display3_expected_prev[6] !== 1'bx ) && ( display3_prev[6] !== display3_expected_prev[6] )
		&& ((display3_expected_prev[6] !== last_display3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[6] = display3_expected_prev[6];
	end
	if (
		( display4_expected_prev[0] !== 1'bx ) && ( display4_prev[0] !== display4_expected_prev[0] )
		&& ((display4_expected_prev[0] !== last_display4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display4_exp[0] = display4_expected_prev[0];
	end
	if (
		( display4_expected_prev[1] !== 1'bx ) && ( display4_prev[1] !== display4_expected_prev[1] )
		&& ((display4_expected_prev[1] !== last_display4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display4_exp[1] = display4_expected_prev[1];
	end
	if (
		( display4_expected_prev[2] !== 1'bx ) && ( display4_prev[2] !== display4_expected_prev[2] )
		&& ((display4_expected_prev[2] !== last_display4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display4_exp[2] = display4_expected_prev[2];
	end
	if (
		( display4_expected_prev[3] !== 1'bx ) && ( display4_prev[3] !== display4_expected_prev[3] )
		&& ((display4_expected_prev[3] !== last_display4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display4_exp[3] = display4_expected_prev[3];
	end
	if (
		( display4_expected_prev[4] !== 1'bx ) && ( display4_prev[4] !== display4_expected_prev[4] )
		&& ((display4_expected_prev[4] !== last_display4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display4_exp[4] = display4_expected_prev[4];
	end
	if (
		( display4_expected_prev[5] !== 1'bx ) && ( display4_prev[5] !== display4_expected_prev[5] )
		&& ((display4_expected_prev[5] !== last_display4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display4_exp[5] = display4_expected_prev[5];
	end
	if (
		( display4_expected_prev[6] !== 1'bx ) && ( display4_prev[6] !== display4_expected_prev[6] )
		&& ((display4_expected_prev[6] !== last_display4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display4_exp[6] = display4_expected_prev[6];
	end
	if (
		( display5_expected_prev[0] !== 1'bx ) && ( display5_prev[0] !== display5_expected_prev[0] )
		&& ((display5_expected_prev[0] !== last_display5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display5_exp[0] = display5_expected_prev[0];
	end
	if (
		( display5_expected_prev[1] !== 1'bx ) && ( display5_prev[1] !== display5_expected_prev[1] )
		&& ((display5_expected_prev[1] !== last_display5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display5_exp[1] = display5_expected_prev[1];
	end
	if (
		( display5_expected_prev[2] !== 1'bx ) && ( display5_prev[2] !== display5_expected_prev[2] )
		&& ((display5_expected_prev[2] !== last_display5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display5_exp[2] = display5_expected_prev[2];
	end
	if (
		( display5_expected_prev[3] !== 1'bx ) && ( display5_prev[3] !== display5_expected_prev[3] )
		&& ((display5_expected_prev[3] !== last_display5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display5_exp[3] = display5_expected_prev[3];
	end
	if (
		( display5_expected_prev[4] !== 1'bx ) && ( display5_prev[4] !== display5_expected_prev[4] )
		&& ((display5_expected_prev[4] !== last_display5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display5_exp[4] = display5_expected_prev[4];
	end
	if (
		( display5_expected_prev[5] !== 1'bx ) && ( display5_prev[5] !== display5_expected_prev[5] )
		&& ((display5_expected_prev[5] !== last_display5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display5_exp[5] = display5_expected_prev[5];
	end
	if (
		( display5_expected_prev[6] !== 1'bx ) && ( display5_prev[6] !== display5_expected_prev[6] )
		&& ((display5_expected_prev[6] !== last_display5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display5_exp[6] = display5_expected_prev[6];
	end
	if (
		( testevalor1_expected_prev[0] !== 1'bx ) && ( testevalor1_prev[0] !== testevalor1_expected_prev[0] )
		&& ((testevalor1_expected_prev[0] !== last_testevalor1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[0] = testevalor1_expected_prev[0];
	end
	if (
		( testevalor1_expected_prev[1] !== 1'bx ) && ( testevalor1_prev[1] !== testevalor1_expected_prev[1] )
		&& ((testevalor1_expected_prev[1] !== last_testevalor1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[1] = testevalor1_expected_prev[1];
	end
	if (
		( testevalor1_expected_prev[2] !== 1'bx ) && ( testevalor1_prev[2] !== testevalor1_expected_prev[2] )
		&& ((testevalor1_expected_prev[2] !== last_testevalor1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[2] = testevalor1_expected_prev[2];
	end
	if (
		( testevalor1_expected_prev[3] !== 1'bx ) && ( testevalor1_prev[3] !== testevalor1_expected_prev[3] )
		&& ((testevalor1_expected_prev[3] !== last_testevalor1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[3] = testevalor1_expected_prev[3];
	end
	if (
		( testevalor1_expected_prev[4] !== 1'bx ) && ( testevalor1_prev[4] !== testevalor1_expected_prev[4] )
		&& ((testevalor1_expected_prev[4] !== last_testevalor1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[4] = testevalor1_expected_prev[4];
	end
	if (
		( testevalor1_expected_prev[5] !== 1'bx ) && ( testevalor1_prev[5] !== testevalor1_expected_prev[5] )
		&& ((testevalor1_expected_prev[5] !== last_testevalor1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[5] = testevalor1_expected_prev[5];
	end
	if (
		( testevalor1_expected_prev[6] !== 1'bx ) && ( testevalor1_prev[6] !== testevalor1_expected_prev[6] )
		&& ((testevalor1_expected_prev[6] !== last_testevalor1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[6] = testevalor1_expected_prev[6];
	end
	if (
		( testevalor1_expected_prev[7] !== 1'bx ) && ( testevalor1_prev[7] !== testevalor1_expected_prev[7] )
		&& ((testevalor1_expected_prev[7] !== last_testevalor1_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[7] = testevalor1_expected_prev[7];
	end
	if (
		( testevalor1_expected_prev[8] !== 1'bx ) && ( testevalor1_prev[8] !== testevalor1_expected_prev[8] )
		&& ((testevalor1_expected_prev[8] !== last_testevalor1_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[8] = testevalor1_expected_prev[8];
	end
	if (
		( testevalor1_expected_prev[9] !== 1'bx ) && ( testevalor1_prev[9] !== testevalor1_expected_prev[9] )
		&& ((testevalor1_expected_prev[9] !== last_testevalor1_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[9] = testevalor1_expected_prev[9];
	end
	if (
		( testevalor1_expected_prev[10] !== 1'bx ) && ( testevalor1_prev[10] !== testevalor1_expected_prev[10] )
		&& ((testevalor1_expected_prev[10] !== last_testevalor1_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[10] = testevalor1_expected_prev[10];
	end
	if (
		( testevalor1_expected_prev[11] !== 1'bx ) && ( testevalor1_prev[11] !== testevalor1_expected_prev[11] )
		&& ((testevalor1_expected_prev[11] !== last_testevalor1_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[11] = testevalor1_expected_prev[11];
	end
	if (
		( testevalor1_expected_prev[12] !== 1'bx ) && ( testevalor1_prev[12] !== testevalor1_expected_prev[12] )
		&& ((testevalor1_expected_prev[12] !== last_testevalor1_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[12] = testevalor1_expected_prev[12];
	end
	if (
		( testevalor1_expected_prev[13] !== 1'bx ) && ( testevalor1_prev[13] !== testevalor1_expected_prev[13] )
		&& ((testevalor1_expected_prev[13] !== last_testevalor1_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[13] = testevalor1_expected_prev[13];
	end
	if (
		( testevalor1_expected_prev[14] !== 1'bx ) && ( testevalor1_prev[14] !== testevalor1_expected_prev[14] )
		&& ((testevalor1_expected_prev[14] !== last_testevalor1_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[14] = testevalor1_expected_prev[14];
	end
	if (
		( testevalor1_expected_prev[15] !== 1'bx ) && ( testevalor1_prev[15] !== testevalor1_expected_prev[15] )
		&& ((testevalor1_expected_prev[15] !== last_testevalor1_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor1_expected_prev);
		$display ("     Real value = %b", testevalor1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testevalor1_exp[15] = testevalor1_expected_prev[15];
	end
	if (
		( testevalor2_expected_prev[0] !== 1'bx ) && ( testevalor2_prev[0] !== testevalor2_expected_prev[0] )
		&& ((testevalor2_expected_prev[0] !== last_testevalor2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[0] = testevalor2_expected_prev[0];
	end
	if (
		( testevalor2_expected_prev[1] !== 1'bx ) && ( testevalor2_prev[1] !== testevalor2_expected_prev[1] )
		&& ((testevalor2_expected_prev[1] !== last_testevalor2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[1] = testevalor2_expected_prev[1];
	end
	if (
		( testevalor2_expected_prev[2] !== 1'bx ) && ( testevalor2_prev[2] !== testevalor2_expected_prev[2] )
		&& ((testevalor2_expected_prev[2] !== last_testevalor2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[2] = testevalor2_expected_prev[2];
	end
	if (
		( testevalor2_expected_prev[3] !== 1'bx ) && ( testevalor2_prev[3] !== testevalor2_expected_prev[3] )
		&& ((testevalor2_expected_prev[3] !== last_testevalor2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[3] = testevalor2_expected_prev[3];
	end
	if (
		( testevalor2_expected_prev[4] !== 1'bx ) && ( testevalor2_prev[4] !== testevalor2_expected_prev[4] )
		&& ((testevalor2_expected_prev[4] !== last_testevalor2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[4] = testevalor2_expected_prev[4];
	end
	if (
		( testevalor2_expected_prev[5] !== 1'bx ) && ( testevalor2_prev[5] !== testevalor2_expected_prev[5] )
		&& ((testevalor2_expected_prev[5] !== last_testevalor2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[5] = testevalor2_expected_prev[5];
	end
	if (
		( testevalor2_expected_prev[6] !== 1'bx ) && ( testevalor2_prev[6] !== testevalor2_expected_prev[6] )
		&& ((testevalor2_expected_prev[6] !== last_testevalor2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[6] = testevalor2_expected_prev[6];
	end
	if (
		( testevalor2_expected_prev[7] !== 1'bx ) && ( testevalor2_prev[7] !== testevalor2_expected_prev[7] )
		&& ((testevalor2_expected_prev[7] !== last_testevalor2_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[7] = testevalor2_expected_prev[7];
	end
	if (
		( testevalor2_expected_prev[8] !== 1'bx ) && ( testevalor2_prev[8] !== testevalor2_expected_prev[8] )
		&& ((testevalor2_expected_prev[8] !== last_testevalor2_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[8] = testevalor2_expected_prev[8];
	end
	if (
		( testevalor2_expected_prev[9] !== 1'bx ) && ( testevalor2_prev[9] !== testevalor2_expected_prev[9] )
		&& ((testevalor2_expected_prev[9] !== last_testevalor2_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[9] = testevalor2_expected_prev[9];
	end
	if (
		( testevalor2_expected_prev[10] !== 1'bx ) && ( testevalor2_prev[10] !== testevalor2_expected_prev[10] )
		&& ((testevalor2_expected_prev[10] !== last_testevalor2_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[10] = testevalor2_expected_prev[10];
	end
	if (
		( testevalor2_expected_prev[11] !== 1'bx ) && ( testevalor2_prev[11] !== testevalor2_expected_prev[11] )
		&& ((testevalor2_expected_prev[11] !== last_testevalor2_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[11] = testevalor2_expected_prev[11];
	end
	if (
		( testevalor2_expected_prev[12] !== 1'bx ) && ( testevalor2_prev[12] !== testevalor2_expected_prev[12] )
		&& ((testevalor2_expected_prev[12] !== last_testevalor2_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[12] = testevalor2_expected_prev[12];
	end
	if (
		( testevalor2_expected_prev[13] !== 1'bx ) && ( testevalor2_prev[13] !== testevalor2_expected_prev[13] )
		&& ((testevalor2_expected_prev[13] !== last_testevalor2_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[13] = testevalor2_expected_prev[13];
	end
	if (
		( testevalor2_expected_prev[14] !== 1'bx ) && ( testevalor2_prev[14] !== testevalor2_expected_prev[14] )
		&& ((testevalor2_expected_prev[14] !== last_testevalor2_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[14] = testevalor2_expected_prev[14];
	end
	if (
		( testevalor2_expected_prev[15] !== 1'bx ) && ( testevalor2_prev[15] !== testevalor2_expected_prev[15] )
		&& ((testevalor2_expected_prev[15] !== last_testevalor2_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testevalor2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testevalor2_expected_prev);
		$display ("     Real value = %b", testevalor2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testevalor2_exp[15] = testevalor2_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processamento_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_in;
reg clk;
reg [15:0] entrada;
// wires                                               
wire [4:0] codigo;
wire [6:0] display1;
wire [6:0] display2;
wire [6:0] display3;
wire [6:0] display4;
wire [6:0] display5;
wire [15:0] testevalor1;
wire [15:0] testevalor2;

wire sampler;                             

// assign statements (if any)                          
processamento i1 (
// port map - connection between master ports and signals/registers   
	.button_in(button_in),
	.clk(clk),
	.codigo(codigo),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.entrada(entrada),
	.testevalor1(testevalor1),
	.testevalor2(testevalor2)
);

// button_in
initial
begin
	button_in = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b0;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b0;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b0;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b0;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b0;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b0;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b0;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b0;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b0;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b0;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b0;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b0;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b0;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b0;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b0;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b0;
end 

processamento_vlg_sample_tst tb_sample (
	.button_in(button_in),
	.clk(clk),
	.entrada(entrada),
	.sampler_tx(sampler)
);

processamento_vlg_check_tst tb_out(
	.codigo(codigo),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.testevalor1(testevalor1),
	.testevalor2(testevalor2),
	.sampler_rx(sampler)
);
endmodule

