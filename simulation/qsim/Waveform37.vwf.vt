// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/02/2015 13:32:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processamento
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processamento_vlg_sample_tst(
	button_in,
	clk,
	entrada,
	reset,
	sampler_tx
);
input  button_in;
input  clk;
input [15:0] entrada;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(button_in or clk or entrada or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processamento_vlg_check_tst (
	display1,
	display2,
	display3,
	display4,
	display5,
	testeinstrucao,
	testestore,
	testeula,
	sampler_rx
);
input [6:0] display1;
input [6:0] display2;
input [6:0] display3;
input [6:0] display4;
input [6:0] display5;
input [31:0] testeinstrucao;
input [15:0] testestore;
input [15:0] testeula;
input sampler_rx;

reg [6:0] display1_expected;
reg [6:0] display2_expected;
reg [6:0] display3_expected;
reg [6:0] display4_expected;
reg [6:0] display5_expected;
reg [31:0] testeinstrucao_expected;
reg [15:0] testestore_expected;
reg [15:0] testeula_expected;

reg [6:0] display1_prev;
reg [6:0] display2_prev;
reg [6:0] display3_prev;
reg [6:0] display4_prev;
reg [6:0] display5_prev;
reg [31:0] testeinstrucao_prev;
reg [15:0] testestore_prev;
reg [15:0] testeula_prev;

reg [6:0] display1_expected_prev;
reg [6:0] display2_expected_prev;
reg [6:0] display3_expected_prev;
reg [6:0] display4_expected_prev;
reg [6:0] display5_expected_prev;
reg [31:0] testeinstrucao_expected_prev;
reg [15:0] testestore_expected_prev;
reg [15:0] testeula_expected_prev;

reg [6:0] last_display1_exp;
reg [6:0] last_display2_exp;
reg [6:0] last_display3_exp;
reg [6:0] last_display4_exp;
reg [6:0] last_display5_exp;
reg [31:0] last_testeinstrucao_exp;
reg [15:0] last_testestore_exp;
reg [15:0] last_testeula_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	display1_prev = display1;
	display2_prev = display2;
	display3_prev = display3;
	display4_prev = display4;
	display5_prev = display5;
	testeinstrucao_prev = testeinstrucao;
	testestore_prev = testestore;
	testeula_prev = testeula;
end

// update expected /o prevs

always @(trigger)
begin
	display1_expected_prev = display1_expected;
	display2_expected_prev = display2_expected;
	display3_expected_prev = display3_expected;
	display4_expected_prev = display4_expected;
	display5_expected_prev = display5_expected;
	testeinstrucao_expected_prev = testeinstrucao_expected;
	testestore_expected_prev = testestore_expected;
	testeula_expected_prev = testeula_expected;
end


// expected display1[ 6 ]
initial
begin
	display1_expected[6] = 1'bX;
end 
// expected display1[ 5 ]
initial
begin
	display1_expected[5] = 1'bX;
end 
// expected display1[ 4 ]
initial
begin
	display1_expected[4] = 1'bX;
end 
// expected display1[ 3 ]
initial
begin
	display1_expected[3] = 1'bX;
end 
// expected display1[ 2 ]
initial
begin
	display1_expected[2] = 1'bX;
end 
// expected display1[ 1 ]
initial
begin
	display1_expected[1] = 1'bX;
end 
// expected display1[ 0 ]
initial
begin
	display1_expected[0] = 1'bX;
end 
// expected display2[ 6 ]
initial
begin
	display2_expected[6] = 1'bX;
end 
// expected display2[ 5 ]
initial
begin
	display2_expected[5] = 1'bX;
end 
// expected display2[ 4 ]
initial
begin
	display2_expected[4] = 1'bX;
end 
// expected display2[ 3 ]
initial
begin
	display2_expected[3] = 1'bX;
end 
// expected display2[ 2 ]
initial
begin
	display2_expected[2] = 1'bX;
end 
// expected display2[ 1 ]
initial
begin
	display2_expected[1] = 1'bX;
end 
// expected display2[ 0 ]
initial
begin
	display2_expected[0] = 1'bX;
end 
// expected display3[ 6 ]
initial
begin
	display3_expected[6] = 1'bX;
end 
// expected display3[ 5 ]
initial
begin
	display3_expected[5] = 1'bX;
end 
// expected display3[ 4 ]
initial
begin
	display3_expected[4] = 1'bX;
end 
// expected display3[ 3 ]
initial
begin
	display3_expected[3] = 1'bX;
end 
// expected display3[ 2 ]
initial
begin
	display3_expected[2] = 1'bX;
end 
// expected display3[ 1 ]
initial
begin
	display3_expected[1] = 1'bX;
end 
// expected display3[ 0 ]
initial
begin
	display3_expected[0] = 1'bX;
end 
// expected display4[ 6 ]
initial
begin
	display4_expected[6] = 1'bX;
end 
// expected display4[ 5 ]
initial
begin
	display4_expected[5] = 1'bX;
end 
// expected display4[ 4 ]
initial
begin
	display4_expected[4] = 1'bX;
end 
// expected display4[ 3 ]
initial
begin
	display4_expected[3] = 1'bX;
end 
// expected display4[ 2 ]
initial
begin
	display4_expected[2] = 1'bX;
end 
// expected display4[ 1 ]
initial
begin
	display4_expected[1] = 1'bX;
end 
// expected display4[ 0 ]
initial
begin
	display4_expected[0] = 1'bX;
end 
// expected display5[ 6 ]
initial
begin
	display5_expected[6] = 1'bX;
end 
// expected display5[ 5 ]
initial
begin
	display5_expected[5] = 1'bX;
end 
// expected display5[ 4 ]
initial
begin
	display5_expected[4] = 1'bX;
end 
// expected display5[ 3 ]
initial
begin
	display5_expected[3] = 1'bX;
end 
// expected display5[ 2 ]
initial
begin
	display5_expected[2] = 1'bX;
end 
// expected display5[ 1 ]
initial
begin
	display5_expected[1] = 1'bX;
end 
// expected display5[ 0 ]
initial
begin
	display5_expected[0] = 1'bX;
end 
// expected testeinstrucao[ 31 ]
initial
begin
	testeinstrucao_expected[31] = 1'bX;
end 
// expected testeinstrucao[ 30 ]
initial
begin
	testeinstrucao_expected[30] = 1'bX;
end 
// expected testeinstrucao[ 29 ]
initial
begin
	testeinstrucao_expected[29] = 1'bX;
end 
// expected testeinstrucao[ 28 ]
initial
begin
	testeinstrucao_expected[28] = 1'bX;
end 
// expected testeinstrucao[ 27 ]
initial
begin
	testeinstrucao_expected[27] = 1'bX;
end 
// expected testeinstrucao[ 26 ]
initial
begin
	testeinstrucao_expected[26] = 1'bX;
end 
// expected testeinstrucao[ 25 ]
initial
begin
	testeinstrucao_expected[25] = 1'bX;
end 
// expected testeinstrucao[ 24 ]
initial
begin
	testeinstrucao_expected[24] = 1'bX;
end 
// expected testeinstrucao[ 23 ]
initial
begin
	testeinstrucao_expected[23] = 1'bX;
end 
// expected testeinstrucao[ 22 ]
initial
begin
	testeinstrucao_expected[22] = 1'bX;
end 
// expected testeinstrucao[ 21 ]
initial
begin
	testeinstrucao_expected[21] = 1'bX;
end 
// expected testeinstrucao[ 20 ]
initial
begin
	testeinstrucao_expected[20] = 1'bX;
end 
// expected testeinstrucao[ 19 ]
initial
begin
	testeinstrucao_expected[19] = 1'bX;
end 
// expected testeinstrucao[ 18 ]
initial
begin
	testeinstrucao_expected[18] = 1'bX;
end 
// expected testeinstrucao[ 17 ]
initial
begin
	testeinstrucao_expected[17] = 1'bX;
end 
// expected testeinstrucao[ 16 ]
initial
begin
	testeinstrucao_expected[16] = 1'bX;
end 
// expected testeinstrucao[ 15 ]
initial
begin
	testeinstrucao_expected[15] = 1'bX;
end 
// expected testeinstrucao[ 14 ]
initial
begin
	testeinstrucao_expected[14] = 1'bX;
end 
// expected testeinstrucao[ 13 ]
initial
begin
	testeinstrucao_expected[13] = 1'bX;
end 
// expected testeinstrucao[ 12 ]
initial
begin
	testeinstrucao_expected[12] = 1'bX;
end 
// expected testeinstrucao[ 11 ]
initial
begin
	testeinstrucao_expected[11] = 1'bX;
end 
// expected testeinstrucao[ 10 ]
initial
begin
	testeinstrucao_expected[10] = 1'bX;
end 
// expected testeinstrucao[ 9 ]
initial
begin
	testeinstrucao_expected[9] = 1'bX;
end 
// expected testeinstrucao[ 8 ]
initial
begin
	testeinstrucao_expected[8] = 1'bX;
end 
// expected testeinstrucao[ 7 ]
initial
begin
	testeinstrucao_expected[7] = 1'bX;
end 
// expected testeinstrucao[ 6 ]
initial
begin
	testeinstrucao_expected[6] = 1'bX;
end 
// expected testeinstrucao[ 5 ]
initial
begin
	testeinstrucao_expected[5] = 1'bX;
end 
// expected testeinstrucao[ 4 ]
initial
begin
	testeinstrucao_expected[4] = 1'bX;
end 
// expected testeinstrucao[ 3 ]
initial
begin
	testeinstrucao_expected[3] = 1'bX;
end 
// expected testeinstrucao[ 2 ]
initial
begin
	testeinstrucao_expected[2] = 1'bX;
end 
// expected testeinstrucao[ 1 ]
initial
begin
	testeinstrucao_expected[1] = 1'bX;
end 
// expected testeinstrucao[ 0 ]
initial
begin
	testeinstrucao_expected[0] = 1'bX;
end 
// expected testestore[ 15 ]
initial
begin
	testestore_expected[15] = 1'bX;
end 
// expected testestore[ 14 ]
initial
begin
	testestore_expected[14] = 1'bX;
end 
// expected testestore[ 13 ]
initial
begin
	testestore_expected[13] = 1'bX;
end 
// expected testestore[ 12 ]
initial
begin
	testestore_expected[12] = 1'bX;
end 
// expected testestore[ 11 ]
initial
begin
	testestore_expected[11] = 1'bX;
end 
// expected testestore[ 10 ]
initial
begin
	testestore_expected[10] = 1'bX;
end 
// expected testestore[ 9 ]
initial
begin
	testestore_expected[9] = 1'bX;
end 
// expected testestore[ 8 ]
initial
begin
	testestore_expected[8] = 1'bX;
end 
// expected testestore[ 7 ]
initial
begin
	testestore_expected[7] = 1'bX;
end 
// expected testestore[ 6 ]
initial
begin
	testestore_expected[6] = 1'bX;
end 
// expected testestore[ 5 ]
initial
begin
	testestore_expected[5] = 1'bX;
end 
// expected testestore[ 4 ]
initial
begin
	testestore_expected[4] = 1'bX;
end 
// expected testestore[ 3 ]
initial
begin
	testestore_expected[3] = 1'bX;
end 
// expected testestore[ 2 ]
initial
begin
	testestore_expected[2] = 1'bX;
end 
// expected testestore[ 1 ]
initial
begin
	testestore_expected[1] = 1'bX;
end 
// expected testestore[ 0 ]
initial
begin
	testestore_expected[0] = 1'bX;
end 
// expected testeula[ 15 ]
initial
begin
	testeula_expected[15] = 1'bX;
end 
// expected testeula[ 14 ]
initial
begin
	testeula_expected[14] = 1'bX;
end 
// expected testeula[ 13 ]
initial
begin
	testeula_expected[13] = 1'bX;
end 
// expected testeula[ 12 ]
initial
begin
	testeula_expected[12] = 1'bX;
end 
// expected testeula[ 11 ]
initial
begin
	testeula_expected[11] = 1'bX;
end 
// expected testeula[ 10 ]
initial
begin
	testeula_expected[10] = 1'bX;
end 
// expected testeula[ 9 ]
initial
begin
	testeula_expected[9] = 1'bX;
end 
// expected testeula[ 8 ]
initial
begin
	testeula_expected[8] = 1'bX;
end 
// expected testeula[ 7 ]
initial
begin
	testeula_expected[7] = 1'bX;
end 
// expected testeula[ 6 ]
initial
begin
	testeula_expected[6] = 1'bX;
end 
// expected testeula[ 5 ]
initial
begin
	testeula_expected[5] = 1'bX;
end 
// expected testeula[ 4 ]
initial
begin
	testeula_expected[4] = 1'bX;
end 
// expected testeula[ 3 ]
initial
begin
	testeula_expected[3] = 1'bX;
end 
// expected testeula[ 2 ]
initial
begin
	testeula_expected[2] = 1'bX;
end 
// expected testeula[ 1 ]
initial
begin
	testeula_expected[1] = 1'bX;
end 
// expected testeula[ 0 ]
initial
begin
	testeula_expected[0] = 1'bX;
end 
// generate trigger
always @(display1_expected or display1 or display2_expected or display2 or display3_expected or display3 or display4_expected or display4 or display5_expected or display5 or testeinstrucao_expected or testeinstrucao or testestore_expected or testestore or testeula_expected or testeula)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display1 = %b | expected display2 = %b | expected display3 = %b | expected display4 = %b | expected display5 = %b | expected testeinstrucao = %b | expected testestore = %b | expected testeula = %b | ",display1_expected_prev,display2_expected_prev,display3_expected_prev,display4_expected_prev,display5_expected_prev,testeinstrucao_expected_prev,testestore_expected_prev,testeula_expected_prev);
	$display("| real display1 = %b | real display2 = %b | real display3 = %b | real display4 = %b | real display5 = %b | real testeinstrucao = %b | real testestore = %b | real testeula = %b | ",display1_prev,display2_prev,display3_prev,display4_prev,display5_prev,testeinstrucao_prev,testestore_prev,testeula_prev);
`endif
	if (
		( display1_expected_prev[0] !== 1'bx ) && ( display1_prev[0] !== display1_expected_prev[0] )
		&& ((display1_expected_prev[0] !== last_display1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[0] = display1_expected_prev[0];
	end
	if (
		( display1_expected_prev[1] !== 1'bx ) && ( display1_prev[1] !== display1_expected_prev[1] )
		&& ((display1_expected_prev[1] !== last_display1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[1] = display1_expected_prev[1];
	end
	if (
		( display1_expected_prev[2] !== 1'bx ) && ( display1_prev[2] !== display1_expected_prev[2] )
		&& ((display1_expected_prev[2] !== last_display1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[2] = display1_expected_prev[2];
	end
	if (
		( display1_expected_prev[3] !== 1'bx ) && ( display1_prev[3] !== display1_expected_prev[3] )
		&& ((display1_expected_prev[3] !== last_display1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[3] = display1_expected_prev[3];
	end
	if (
		( display1_expected_prev[4] !== 1'bx ) && ( display1_prev[4] !== display1_expected_prev[4] )
		&& ((display1_expected_prev[4] !== last_display1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[4] = display1_expected_prev[4];
	end
	if (
		( display1_expected_prev[5] !== 1'bx ) && ( display1_prev[5] !== display1_expected_prev[5] )
		&& ((display1_expected_prev[5] !== last_display1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[5] = display1_expected_prev[5];
	end
	if (
		( display1_expected_prev[6] !== 1'bx ) && ( display1_prev[6] !== display1_expected_prev[6] )
		&& ((display1_expected_prev[6] !== last_display1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display1_exp[6] = display1_expected_prev[6];
	end
	if (
		( display2_expected_prev[0] !== 1'bx ) && ( display2_prev[0] !== display2_expected_prev[0] )
		&& ((display2_expected_prev[0] !== last_display2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[0] = display2_expected_prev[0];
	end
	if (
		( display2_expected_prev[1] !== 1'bx ) && ( display2_prev[1] !== display2_expected_prev[1] )
		&& ((display2_expected_prev[1] !== last_display2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[1] = display2_expected_prev[1];
	end
	if (
		( display2_expected_prev[2] !== 1'bx ) && ( display2_prev[2] !== display2_expected_prev[2] )
		&& ((display2_expected_prev[2] !== last_display2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[2] = display2_expected_prev[2];
	end
	if (
		( display2_expected_prev[3] !== 1'bx ) && ( display2_prev[3] !== display2_expected_prev[3] )
		&& ((display2_expected_prev[3] !== last_display2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[3] = display2_expected_prev[3];
	end
	if (
		( display2_expected_prev[4] !== 1'bx ) && ( display2_prev[4] !== display2_expected_prev[4] )
		&& ((display2_expected_prev[4] !== last_display2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[4] = display2_expected_prev[4];
	end
	if (
		( display2_expected_prev[5] !== 1'bx ) && ( display2_prev[5] !== display2_expected_prev[5] )
		&& ((display2_expected_prev[5] !== last_display2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[5] = display2_expected_prev[5];
	end
	if (
		( display2_expected_prev[6] !== 1'bx ) && ( display2_prev[6] !== display2_expected_prev[6] )
		&& ((display2_expected_prev[6] !== last_display2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display2_exp[6] = display2_expected_prev[6];
	end
	if (
		( display3_expected_prev[0] !== 1'bx ) && ( display3_prev[0] !== display3_expected_prev[0] )
		&& ((display3_expected_prev[0] !== last_display3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display3_exp[0] = display3_expected_prev[0];
	end
	if (
		( display3_expected_prev[1] !== 1'bx ) && ( display3_prev[1] !== display3_expected_prev[1] )
		&& ((display3_expected_prev[1] !== last_display3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display3_exp[1] = display3_expected_prev[1];
	end
	if (
		( display3_expected_prev[2] !== 1'bx ) && ( display3_prev[2] !== display3_expected_prev[2] )
		&& ((display3_expected_prev[2] !== last_display3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display3_exp[2] = display3_expected_prev[2];
	end
	if (
		( display3_expected_prev[3] !== 1'bx ) && ( display3_prev[3] !== display3_expected_prev[3] )
		&& ((display3_expected_prev[3] !== last_display3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display3_exp[3] = display3_expected_prev[3];
	end
	if (
		( display3_expected_prev[4] !== 1'bx ) && ( display3_prev[4] !== display3_expected_prev[4] )
		&& ((display3_expected_prev[4] !== last_display3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display3_exp[4] = display3_expected_prev[4];
	end
	if (
		( display3_expected_prev[5] !== 1'bx ) && ( display3_prev[5] !== display3_expected_prev[5] )
		&& ((display3_expected_prev[5] !== last_display3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display3_exp[5] = display3_expected_prev[5];
	end
	if (
		( display3_expected_prev[6] !== 1'bx ) && ( display3_prev[6] !== display3_expected_prev[6] )
		&& ((display3_expected_prev[6] !== last_display3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display3_exp[6] = display3_expected_prev[6];
	end
	if (
		( display4_expected_prev[0] !== 1'bx ) && ( display4_prev[0] !== display4_expected_prev[0] )
		&& ((display4_expected_prev[0] !== last_display4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display4_exp[0] = display4_expected_prev[0];
	end
	if (
		( display4_expected_prev[1] !== 1'bx ) && ( display4_prev[1] !== display4_expected_prev[1] )
		&& ((display4_expected_prev[1] !== last_display4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display4_exp[1] = display4_expected_prev[1];
	end
	if (
		( display4_expected_prev[2] !== 1'bx ) && ( display4_prev[2] !== display4_expected_prev[2] )
		&& ((display4_expected_prev[2] !== last_display4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display4_exp[2] = display4_expected_prev[2];
	end
	if (
		( display4_expected_prev[3] !== 1'bx ) && ( display4_prev[3] !== display4_expected_prev[3] )
		&& ((display4_expected_prev[3] !== last_display4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display4_exp[3] = display4_expected_prev[3];
	end
	if (
		( display4_expected_prev[4] !== 1'bx ) && ( display4_prev[4] !== display4_expected_prev[4] )
		&& ((display4_expected_prev[4] !== last_display4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display4_exp[4] = display4_expected_prev[4];
	end
	if (
		( display4_expected_prev[5] !== 1'bx ) && ( display4_prev[5] !== display4_expected_prev[5] )
		&& ((display4_expected_prev[5] !== last_display4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display4_exp[5] = display4_expected_prev[5];
	end
	if (
		( display4_expected_prev[6] !== 1'bx ) && ( display4_prev[6] !== display4_expected_prev[6] )
		&& ((display4_expected_prev[6] !== last_display4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display4_exp[6] = display4_expected_prev[6];
	end
	if (
		( display5_expected_prev[0] !== 1'bx ) && ( display5_prev[0] !== display5_expected_prev[0] )
		&& ((display5_expected_prev[0] !== last_display5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display5_exp[0] = display5_expected_prev[0];
	end
	if (
		( display5_expected_prev[1] !== 1'bx ) && ( display5_prev[1] !== display5_expected_prev[1] )
		&& ((display5_expected_prev[1] !== last_display5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display5_exp[1] = display5_expected_prev[1];
	end
	if (
		( display5_expected_prev[2] !== 1'bx ) && ( display5_prev[2] !== display5_expected_prev[2] )
		&& ((display5_expected_prev[2] !== last_display5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display5_exp[2] = display5_expected_prev[2];
	end
	if (
		( display5_expected_prev[3] !== 1'bx ) && ( display5_prev[3] !== display5_expected_prev[3] )
		&& ((display5_expected_prev[3] !== last_display5_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display5_exp[3] = display5_expected_prev[3];
	end
	if (
		( display5_expected_prev[4] !== 1'bx ) && ( display5_prev[4] !== display5_expected_prev[4] )
		&& ((display5_expected_prev[4] !== last_display5_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display5_exp[4] = display5_expected_prev[4];
	end
	if (
		( display5_expected_prev[5] !== 1'bx ) && ( display5_prev[5] !== display5_expected_prev[5] )
		&& ((display5_expected_prev[5] !== last_display5_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display5_exp[5] = display5_expected_prev[5];
	end
	if (
		( display5_expected_prev[6] !== 1'bx ) && ( display5_prev[6] !== display5_expected_prev[6] )
		&& ((display5_expected_prev[6] !== last_display5_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display5_exp[6] = display5_expected_prev[6];
	end
	if (
		( testeinstrucao_expected_prev[0] !== 1'bx ) && ( testeinstrucao_prev[0] !== testeinstrucao_expected_prev[0] )
		&& ((testeinstrucao_expected_prev[0] !== last_testeinstrucao_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[0] = testeinstrucao_expected_prev[0];
	end
	if (
		( testeinstrucao_expected_prev[1] !== 1'bx ) && ( testeinstrucao_prev[1] !== testeinstrucao_expected_prev[1] )
		&& ((testeinstrucao_expected_prev[1] !== last_testeinstrucao_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[1] = testeinstrucao_expected_prev[1];
	end
	if (
		( testeinstrucao_expected_prev[2] !== 1'bx ) && ( testeinstrucao_prev[2] !== testeinstrucao_expected_prev[2] )
		&& ((testeinstrucao_expected_prev[2] !== last_testeinstrucao_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[2] = testeinstrucao_expected_prev[2];
	end
	if (
		( testeinstrucao_expected_prev[3] !== 1'bx ) && ( testeinstrucao_prev[3] !== testeinstrucao_expected_prev[3] )
		&& ((testeinstrucao_expected_prev[3] !== last_testeinstrucao_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[3] = testeinstrucao_expected_prev[3];
	end
	if (
		( testeinstrucao_expected_prev[4] !== 1'bx ) && ( testeinstrucao_prev[4] !== testeinstrucao_expected_prev[4] )
		&& ((testeinstrucao_expected_prev[4] !== last_testeinstrucao_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[4] = testeinstrucao_expected_prev[4];
	end
	if (
		( testeinstrucao_expected_prev[5] !== 1'bx ) && ( testeinstrucao_prev[5] !== testeinstrucao_expected_prev[5] )
		&& ((testeinstrucao_expected_prev[5] !== last_testeinstrucao_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[5] = testeinstrucao_expected_prev[5];
	end
	if (
		( testeinstrucao_expected_prev[6] !== 1'bx ) && ( testeinstrucao_prev[6] !== testeinstrucao_expected_prev[6] )
		&& ((testeinstrucao_expected_prev[6] !== last_testeinstrucao_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[6] = testeinstrucao_expected_prev[6];
	end
	if (
		( testeinstrucao_expected_prev[7] !== 1'bx ) && ( testeinstrucao_prev[7] !== testeinstrucao_expected_prev[7] )
		&& ((testeinstrucao_expected_prev[7] !== last_testeinstrucao_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[7] = testeinstrucao_expected_prev[7];
	end
	if (
		( testeinstrucao_expected_prev[8] !== 1'bx ) && ( testeinstrucao_prev[8] !== testeinstrucao_expected_prev[8] )
		&& ((testeinstrucao_expected_prev[8] !== last_testeinstrucao_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[8] = testeinstrucao_expected_prev[8];
	end
	if (
		( testeinstrucao_expected_prev[9] !== 1'bx ) && ( testeinstrucao_prev[9] !== testeinstrucao_expected_prev[9] )
		&& ((testeinstrucao_expected_prev[9] !== last_testeinstrucao_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[9] = testeinstrucao_expected_prev[9];
	end
	if (
		( testeinstrucao_expected_prev[10] !== 1'bx ) && ( testeinstrucao_prev[10] !== testeinstrucao_expected_prev[10] )
		&& ((testeinstrucao_expected_prev[10] !== last_testeinstrucao_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[10] = testeinstrucao_expected_prev[10];
	end
	if (
		( testeinstrucao_expected_prev[11] !== 1'bx ) && ( testeinstrucao_prev[11] !== testeinstrucao_expected_prev[11] )
		&& ((testeinstrucao_expected_prev[11] !== last_testeinstrucao_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[11] = testeinstrucao_expected_prev[11];
	end
	if (
		( testeinstrucao_expected_prev[12] !== 1'bx ) && ( testeinstrucao_prev[12] !== testeinstrucao_expected_prev[12] )
		&& ((testeinstrucao_expected_prev[12] !== last_testeinstrucao_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[12] = testeinstrucao_expected_prev[12];
	end
	if (
		( testeinstrucao_expected_prev[13] !== 1'bx ) && ( testeinstrucao_prev[13] !== testeinstrucao_expected_prev[13] )
		&& ((testeinstrucao_expected_prev[13] !== last_testeinstrucao_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[13] = testeinstrucao_expected_prev[13];
	end
	if (
		( testeinstrucao_expected_prev[14] !== 1'bx ) && ( testeinstrucao_prev[14] !== testeinstrucao_expected_prev[14] )
		&& ((testeinstrucao_expected_prev[14] !== last_testeinstrucao_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[14] = testeinstrucao_expected_prev[14];
	end
	if (
		( testeinstrucao_expected_prev[15] !== 1'bx ) && ( testeinstrucao_prev[15] !== testeinstrucao_expected_prev[15] )
		&& ((testeinstrucao_expected_prev[15] !== last_testeinstrucao_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[15] = testeinstrucao_expected_prev[15];
	end
	if (
		( testeinstrucao_expected_prev[16] !== 1'bx ) && ( testeinstrucao_prev[16] !== testeinstrucao_expected_prev[16] )
		&& ((testeinstrucao_expected_prev[16] !== last_testeinstrucao_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[16] = testeinstrucao_expected_prev[16];
	end
	if (
		( testeinstrucao_expected_prev[17] !== 1'bx ) && ( testeinstrucao_prev[17] !== testeinstrucao_expected_prev[17] )
		&& ((testeinstrucao_expected_prev[17] !== last_testeinstrucao_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[17] = testeinstrucao_expected_prev[17];
	end
	if (
		( testeinstrucao_expected_prev[18] !== 1'bx ) && ( testeinstrucao_prev[18] !== testeinstrucao_expected_prev[18] )
		&& ((testeinstrucao_expected_prev[18] !== last_testeinstrucao_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[18] = testeinstrucao_expected_prev[18];
	end
	if (
		( testeinstrucao_expected_prev[19] !== 1'bx ) && ( testeinstrucao_prev[19] !== testeinstrucao_expected_prev[19] )
		&& ((testeinstrucao_expected_prev[19] !== last_testeinstrucao_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[19] = testeinstrucao_expected_prev[19];
	end
	if (
		( testeinstrucao_expected_prev[20] !== 1'bx ) && ( testeinstrucao_prev[20] !== testeinstrucao_expected_prev[20] )
		&& ((testeinstrucao_expected_prev[20] !== last_testeinstrucao_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[20] = testeinstrucao_expected_prev[20];
	end
	if (
		( testeinstrucao_expected_prev[21] !== 1'bx ) && ( testeinstrucao_prev[21] !== testeinstrucao_expected_prev[21] )
		&& ((testeinstrucao_expected_prev[21] !== last_testeinstrucao_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[21] = testeinstrucao_expected_prev[21];
	end
	if (
		( testeinstrucao_expected_prev[22] !== 1'bx ) && ( testeinstrucao_prev[22] !== testeinstrucao_expected_prev[22] )
		&& ((testeinstrucao_expected_prev[22] !== last_testeinstrucao_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[22] = testeinstrucao_expected_prev[22];
	end
	if (
		( testeinstrucao_expected_prev[23] !== 1'bx ) && ( testeinstrucao_prev[23] !== testeinstrucao_expected_prev[23] )
		&& ((testeinstrucao_expected_prev[23] !== last_testeinstrucao_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[23] = testeinstrucao_expected_prev[23];
	end
	if (
		( testeinstrucao_expected_prev[24] !== 1'bx ) && ( testeinstrucao_prev[24] !== testeinstrucao_expected_prev[24] )
		&& ((testeinstrucao_expected_prev[24] !== last_testeinstrucao_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[24] = testeinstrucao_expected_prev[24];
	end
	if (
		( testeinstrucao_expected_prev[25] !== 1'bx ) && ( testeinstrucao_prev[25] !== testeinstrucao_expected_prev[25] )
		&& ((testeinstrucao_expected_prev[25] !== last_testeinstrucao_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[25] = testeinstrucao_expected_prev[25];
	end
	if (
		( testeinstrucao_expected_prev[26] !== 1'bx ) && ( testeinstrucao_prev[26] !== testeinstrucao_expected_prev[26] )
		&& ((testeinstrucao_expected_prev[26] !== last_testeinstrucao_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[26] = testeinstrucao_expected_prev[26];
	end
	if (
		( testeinstrucao_expected_prev[27] !== 1'bx ) && ( testeinstrucao_prev[27] !== testeinstrucao_expected_prev[27] )
		&& ((testeinstrucao_expected_prev[27] !== last_testeinstrucao_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[27] = testeinstrucao_expected_prev[27];
	end
	if (
		( testeinstrucao_expected_prev[28] !== 1'bx ) && ( testeinstrucao_prev[28] !== testeinstrucao_expected_prev[28] )
		&& ((testeinstrucao_expected_prev[28] !== last_testeinstrucao_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[28] = testeinstrucao_expected_prev[28];
	end
	if (
		( testeinstrucao_expected_prev[29] !== 1'bx ) && ( testeinstrucao_prev[29] !== testeinstrucao_expected_prev[29] )
		&& ((testeinstrucao_expected_prev[29] !== last_testeinstrucao_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[29] = testeinstrucao_expected_prev[29];
	end
	if (
		( testeinstrucao_expected_prev[30] !== 1'bx ) && ( testeinstrucao_prev[30] !== testeinstrucao_expected_prev[30] )
		&& ((testeinstrucao_expected_prev[30] !== last_testeinstrucao_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[30] = testeinstrucao_expected_prev[30];
	end
	if (
		( testeinstrucao_expected_prev[31] !== 1'bx ) && ( testeinstrucao_prev[31] !== testeinstrucao_expected_prev[31] )
		&& ((testeinstrucao_expected_prev[31] !== last_testeinstrucao_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeinstrucao[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeinstrucao_expected_prev);
		$display ("     Real value = %b", testeinstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testeinstrucao_exp[31] = testeinstrucao_expected_prev[31];
	end
	if (
		( testestore_expected_prev[0] !== 1'bx ) && ( testestore_prev[0] !== testestore_expected_prev[0] )
		&& ((testestore_expected_prev[0] !== last_testestore_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[0] = testestore_expected_prev[0];
	end
	if (
		( testestore_expected_prev[1] !== 1'bx ) && ( testestore_prev[1] !== testestore_expected_prev[1] )
		&& ((testestore_expected_prev[1] !== last_testestore_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[1] = testestore_expected_prev[1];
	end
	if (
		( testestore_expected_prev[2] !== 1'bx ) && ( testestore_prev[2] !== testestore_expected_prev[2] )
		&& ((testestore_expected_prev[2] !== last_testestore_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[2] = testestore_expected_prev[2];
	end
	if (
		( testestore_expected_prev[3] !== 1'bx ) && ( testestore_prev[3] !== testestore_expected_prev[3] )
		&& ((testestore_expected_prev[3] !== last_testestore_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[3] = testestore_expected_prev[3];
	end
	if (
		( testestore_expected_prev[4] !== 1'bx ) && ( testestore_prev[4] !== testestore_expected_prev[4] )
		&& ((testestore_expected_prev[4] !== last_testestore_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[4] = testestore_expected_prev[4];
	end
	if (
		( testestore_expected_prev[5] !== 1'bx ) && ( testestore_prev[5] !== testestore_expected_prev[5] )
		&& ((testestore_expected_prev[5] !== last_testestore_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[5] = testestore_expected_prev[5];
	end
	if (
		( testestore_expected_prev[6] !== 1'bx ) && ( testestore_prev[6] !== testestore_expected_prev[6] )
		&& ((testestore_expected_prev[6] !== last_testestore_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[6] = testestore_expected_prev[6];
	end
	if (
		( testestore_expected_prev[7] !== 1'bx ) && ( testestore_prev[7] !== testestore_expected_prev[7] )
		&& ((testestore_expected_prev[7] !== last_testestore_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[7] = testestore_expected_prev[7];
	end
	if (
		( testestore_expected_prev[8] !== 1'bx ) && ( testestore_prev[8] !== testestore_expected_prev[8] )
		&& ((testestore_expected_prev[8] !== last_testestore_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[8] = testestore_expected_prev[8];
	end
	if (
		( testestore_expected_prev[9] !== 1'bx ) && ( testestore_prev[9] !== testestore_expected_prev[9] )
		&& ((testestore_expected_prev[9] !== last_testestore_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[9] = testestore_expected_prev[9];
	end
	if (
		( testestore_expected_prev[10] !== 1'bx ) && ( testestore_prev[10] !== testestore_expected_prev[10] )
		&& ((testestore_expected_prev[10] !== last_testestore_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[10] = testestore_expected_prev[10];
	end
	if (
		( testestore_expected_prev[11] !== 1'bx ) && ( testestore_prev[11] !== testestore_expected_prev[11] )
		&& ((testestore_expected_prev[11] !== last_testestore_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[11] = testestore_expected_prev[11];
	end
	if (
		( testestore_expected_prev[12] !== 1'bx ) && ( testestore_prev[12] !== testestore_expected_prev[12] )
		&& ((testestore_expected_prev[12] !== last_testestore_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[12] = testestore_expected_prev[12];
	end
	if (
		( testestore_expected_prev[13] !== 1'bx ) && ( testestore_prev[13] !== testestore_expected_prev[13] )
		&& ((testestore_expected_prev[13] !== last_testestore_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[13] = testestore_expected_prev[13];
	end
	if (
		( testestore_expected_prev[14] !== 1'bx ) && ( testestore_prev[14] !== testestore_expected_prev[14] )
		&& ((testestore_expected_prev[14] !== last_testestore_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[14] = testestore_expected_prev[14];
	end
	if (
		( testestore_expected_prev[15] !== 1'bx ) && ( testestore_prev[15] !== testestore_expected_prev[15] )
		&& ((testestore_expected_prev[15] !== last_testestore_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testestore[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testestore_expected_prev);
		$display ("     Real value = %b", testestore_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_testestore_exp[15] = testestore_expected_prev[15];
	end
	if (
		( testeula_expected_prev[0] !== 1'bx ) && ( testeula_prev[0] !== testeula_expected_prev[0] )
		&& ((testeula_expected_prev[0] !== last_testeula_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[0] = testeula_expected_prev[0];
	end
	if (
		( testeula_expected_prev[1] !== 1'bx ) && ( testeula_prev[1] !== testeula_expected_prev[1] )
		&& ((testeula_expected_prev[1] !== last_testeula_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[1] = testeula_expected_prev[1];
	end
	if (
		( testeula_expected_prev[2] !== 1'bx ) && ( testeula_prev[2] !== testeula_expected_prev[2] )
		&& ((testeula_expected_prev[2] !== last_testeula_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[2] = testeula_expected_prev[2];
	end
	if (
		( testeula_expected_prev[3] !== 1'bx ) && ( testeula_prev[3] !== testeula_expected_prev[3] )
		&& ((testeula_expected_prev[3] !== last_testeula_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[3] = testeula_expected_prev[3];
	end
	if (
		( testeula_expected_prev[4] !== 1'bx ) && ( testeula_prev[4] !== testeula_expected_prev[4] )
		&& ((testeula_expected_prev[4] !== last_testeula_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[4] = testeula_expected_prev[4];
	end
	if (
		( testeula_expected_prev[5] !== 1'bx ) && ( testeula_prev[5] !== testeula_expected_prev[5] )
		&& ((testeula_expected_prev[5] !== last_testeula_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[5] = testeula_expected_prev[5];
	end
	if (
		( testeula_expected_prev[6] !== 1'bx ) && ( testeula_prev[6] !== testeula_expected_prev[6] )
		&& ((testeula_expected_prev[6] !== last_testeula_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[6] = testeula_expected_prev[6];
	end
	if (
		( testeula_expected_prev[7] !== 1'bx ) && ( testeula_prev[7] !== testeula_expected_prev[7] )
		&& ((testeula_expected_prev[7] !== last_testeula_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[7] = testeula_expected_prev[7];
	end
	if (
		( testeula_expected_prev[8] !== 1'bx ) && ( testeula_prev[8] !== testeula_expected_prev[8] )
		&& ((testeula_expected_prev[8] !== last_testeula_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[8] = testeula_expected_prev[8];
	end
	if (
		( testeula_expected_prev[9] !== 1'bx ) && ( testeula_prev[9] !== testeula_expected_prev[9] )
		&& ((testeula_expected_prev[9] !== last_testeula_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[9] = testeula_expected_prev[9];
	end
	if (
		( testeula_expected_prev[10] !== 1'bx ) && ( testeula_prev[10] !== testeula_expected_prev[10] )
		&& ((testeula_expected_prev[10] !== last_testeula_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[10] = testeula_expected_prev[10];
	end
	if (
		( testeula_expected_prev[11] !== 1'bx ) && ( testeula_prev[11] !== testeula_expected_prev[11] )
		&& ((testeula_expected_prev[11] !== last_testeula_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[11] = testeula_expected_prev[11];
	end
	if (
		( testeula_expected_prev[12] !== 1'bx ) && ( testeula_prev[12] !== testeula_expected_prev[12] )
		&& ((testeula_expected_prev[12] !== last_testeula_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[12] = testeula_expected_prev[12];
	end
	if (
		( testeula_expected_prev[13] !== 1'bx ) && ( testeula_prev[13] !== testeula_expected_prev[13] )
		&& ((testeula_expected_prev[13] !== last_testeula_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[13] = testeula_expected_prev[13];
	end
	if (
		( testeula_expected_prev[14] !== 1'bx ) && ( testeula_prev[14] !== testeula_expected_prev[14] )
		&& ((testeula_expected_prev[14] !== last_testeula_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[14] = testeula_expected_prev[14];
	end
	if (
		( testeula_expected_prev[15] !== 1'bx ) && ( testeula_prev[15] !== testeula_expected_prev[15] )
		&& ((testeula_expected_prev[15] !== last_testeula_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeula[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeula_expected_prev);
		$display ("     Real value = %b", testeula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_testeula_exp[15] = testeula_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processamento_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_in;
reg clk;
reg [15:0] entrada;
reg reset;
// wires                                               
wire [6:0] display1;
wire [6:0] display2;
wire [6:0] display3;
wire [6:0] display4;
wire [6:0] display5;
wire [31:0] testeinstrucao;
wire [15:0] testestore;
wire [15:0] testeula;

wire sampler;                             

// assign statements (if any)                          
processamento i1 (
// port map - connection between master ports and signals/registers   
	.button_in(button_in),
	.clk(clk),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.entrada(entrada),
	.reset(reset),
	.testeinstrucao(testeinstrucao),
	.testestore(testestore),
	.testeula(testeula)
);

// button_in
initial
begin
	button_in = 1'b0;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b0;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b0;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b0;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b0;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b0;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b0;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b0;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b0;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b0;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b0;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b0;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b0;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b0;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b0;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b0;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 

processamento_vlg_sample_tst tb_sample (
	.button_in(button_in),
	.clk(clk),
	.entrada(entrada),
	.reset(reset),
	.sampler_tx(sampler)
);

processamento_vlg_check_tst tb_out(
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.testeinstrucao(testeinstrucao),
	.testestore(testestore),
	.testeula(testeula),
	.sampler_rx(sampler)
);
endmodule

