// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/03/2017 19:01:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processamento
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processamento_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_in;
reg clk;
reg [15:0] entrada;
reg reset;
// wires                                               
wire [4:0] codigo;
wire [6:0] display1;
wire [6:0] display2;
wire [6:0] display3;
wire [6:0] display4;
wire [6:0] display5;

// assign statements (if any)                          
processamento i1 (
// port map - connection between master ports and signals/registers   
	.button_in(button_in),
	.clk(clk),
	.codigo(codigo),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.entrada(entrada),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// button_in
initial
begin
	button_in = 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'bX;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'bX;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'bX;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'bX;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'bX;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'bX;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'bX;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'bX;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'bX;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'bX;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'bX;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'bX;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'bX;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'bX;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'bX;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'bX;
end 

// reset
initial
begin
	reset = 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

